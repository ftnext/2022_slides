Part II. 関数と ``*`` や ``**`` 🌟💫🌟💫
============================================================

関数の **引数** と絡めて ``*`` や ``**`` を紹介します

Pythonの関数の引数
============================================================

* *位置またはキーワード引数* （`Pythonチュートリアル 4.8.3.1. <https://docs.python.org/ja/3/tutorial/controlflow.html#positional-or-keyword-arguments>`_）
* 位置引数としても渡せるし、キーワード引数（＝名前付き引数）としても渡せる

関数の例
--------------------------------------------------

.. code-block:: python

    >>> def calculate_bmi(height_m, weight_kg):
    ...     return weight_kg / height_m / height_m

呼び出し例
--------------------------------------------------

.. code-block:: python

    >>> calculate_bmi(1.58, 46)
    18.426534209261334
    >>> # すべてキーワード引数で渡せば、順番を変えられます
    >>> calculate_bmi(weight_kg=46, height_m=1.58)
    18.426534209261334
    >>> # 位置引数はキーワード引数より先に来ます
    >>> calculate_bmi(1.58, weight_kg=46)
    18.426534209261334

キーワード専用引数と示す ``*``
============================================================

* 引数の並びの中で、 ``*,`` のあとの引数は、キーワード専用引数となる
* **必ず名前付き** で渡さなければならず、位置引数としては渡せなくなる

`Pythonチュートリアル 4.8.3.3. <https://docs.python.org/ja/3/tutorial/controlflow.html#keyword-only-arguments>`_

キーワード専用引数をお試し導入
--------------------------------------------------

.. code-block:: python
    :emphasize-lines: 2

    >>> # 2つの引数をどちらもキーワード専用とした
    >>> def calculate_bmi(*, height_m, weight_kg):
    ...     return weight_kg / height_m / height_m

キーワード専用引数の動作確認
--------------------------------------------------

.. code-block:: python

    >>> calculate_bmi(weight_kg=46, height_m=1.58)
    18.426534209261334
    >>> calculate_bmi(1.58, 46)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: calculate_bmi() takes 0 positional arguments but 2 were given

キーワード専用引数の使い所
--------------------------------------------------

* **関数呼び出しの意図を明確に** するために使う（『`Effective Python 第2版 <https://www.oreilly.co.jp/books/9784873119175/>`_』項目25）

  * 例えば複数の論理型フラグを使うような、紛らわしい関数呼び出し
  * 脱線 IMO：フラグ引数は悪魔が潜みがちですよね（ref: #ミノ駆動本）

脱線🍚：位置専用引数もできます
--------------------------------------------------

* Python 3.8 から
* 拙記事 `1月の #stapy で挙がった2つの質問に回答します：キーワード専用引数はいつから？　位置専用引数の使い所は？ <https://nikkie-ftnext.hatenablog.com/entry/stapy77-positional-only-args-question>`_

別の話題：可変長引数と ``*`` や ``**``
============================================================

.. code-block:: python

    >>> def f(*args, **kwargs):
    ...     print(f"{args=}")
    ...     print(f"{kwargs=}")

``*`` が付いた ``args`` や ``**`` が付いた ``kwargs`` について見ていきましょう

脱線🍚： ``f"{args=}"`` というf-string
--------------------------------------------------

* f-stringはPython 3.6から（`フォーマット済み文字列リテラル <https://docs.python.org/ja/3/reference/lexical_analysis.html#formatted-string-literals>`_）
* Python 3.8で ``=`` 指定子が有効に！（`What's New In Python 3.8 <https://docs.python.org/ja/3/whatsnew/3.8.html#f-strings-support-for-self-documenting-expressions-and-debugging>`_）
* ``f"{variable=}"`` は ``"variable=値"`` という形式の文字列になる

可変長位置引数 ``*args``
============================================================

.. code-block:: python

    >>> f(1, 2, 3)
    args=(1, 2, 3)
    kwargs={}

位置引数たちは ``args`` （**タプル**）に詰められる

リストの要素の数字全部を渡したい
--------------------------------------------------

.. code-block:: python

    >>> numbers = [1, 2, 3]
    >>> f(numbers)
    args=([1, 2, 3],)
    kwargs={}

* ``args`` は要素1のタプル
* ``args[0]`` が ``[1, 2, 3]``

イテラブルアンパック演算子を使えば渡せる！🙌
--------------------------------------------------

.. code-block:: python

    >>> f(*numbers)
    args=(1, 2, 3)
    kwargs={}

イテラブルの要素が位置引数として渡された

.. dezero本での説明を紹介できるかも

可変長キーワード引数 ``**kwargs``
============================================================

.. code-block:: python

    >>> f(a=1, b=2, c=3)
    args=()
    kwargs={'a': 1, 'b': 2, 'c': 3}

キーワード引数たちは ``kwargs`` （**辞書**）に詰められる

辞書アンパック演算子を使って辞書を渡すと・・・
--------------------------------------------------

.. code-block:: python

    >>> values = {"a": 1, "b": 2, "c": 3}
    >>> f(**values)
    args=()
    kwargs={'a': 1, 'b': 2, 'c': 3}

辞書のキーと値の組をキーワード引数として渡せました🙌

2種のアンパック演算子は合わせて使えます！
--------------------------------------------------

.. code-block:: python

    >>> f(*numbers, **values)  # ただし、この順に限る
    args=(1, 2, 3)
    kwargs={'a': 1, 'b': 2, 'c': 3}

One more thing: アンパック演算子は **複数回** 使えます！
============================================================

* PEP 448「複数回使える」は関数の引数にも該当します

アンパック演算子を複数回使う例
--------------------------------------------------

.. code-block:: python

    >>> f(*range(2), 2, *[3, 4])
    args=(0, 1, 2, 3, 4)
    kwargs={}
    >>> f(**{"z": 1}, y=2, **{"x": 3})
    args=()
    kwargs={'z': 1, 'y': 2, 'x': 3}

まとめ🌯 Part II. 関数と ``*`` や ``**`` 🌟💫🌟💫
============================================================

* 引数リスト中に ``*`` を置くことで、それ以降を **キーワード専用引数** にできる
* ``*`` を先頭に付けた引数は **可変長位置引数** 、 ``**`` を先頭に付けると **可変長キーワード引数**
* 可変長{位置,キーワード}引数に、アンパック演算子を使って渡すこともできる
