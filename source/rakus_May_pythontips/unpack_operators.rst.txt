Part I. アンパック演算子 🌟💫🌟💫
============================================================

アンパックする演算子としての ``*`` と ``**`` を紹介します

アンパック演算子
--------------------------------------------------

* **イテラブルアンパック演算子**
* 辞書アンパック演算子

用語は「`What's New In Python 3.5 <https://docs.python.org/ja/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations>`_」より

イテラブルアンパック演算子
============================================================

`「イテラブル」を用語集で引く <https://docs.python.org/ja/3/glossary.html#term-iterable>`_ と

>要素を一度に 1 つずつ返せるオブジェクト

これらがイテラブル（用語集より）
--------------------------------------------------

* シーケンス
* 辞書
* ファイルオブジェクト
* など（※イテラブルを自作もできます）

これらがシーケンス（`用語集 <https://docs.python.org/ja/3/glossary.html#term-sequence>`_ より）
----------------------------------------------------------------------------------------------------

* リスト
* 文字列
* タプル
* など（※自作もできます）

整数インデクスでアクセスでき、長さを返す

例で紹介：イテラブルアンパック演算子
============================================================

.. code-block:: python

    >>> # タプル (1, 2) はイテラブル
    >>> [*(1, 2)]
    [1, 2]

この書き方でも新しいリストが作れます🌟💫
--------------------------------------------------

.. code-block:: python

    >>> [*(1, 2), 3]
    [1, 2, 3]

脱線：他のイテラブルでも
--------------------------------------------------

.. code-block:: python

    >>> [0, *[1, 2]]
    [0, 1, 2]
    >>> [*range(2), 2]
    [0, 1, 2]
    >>> [*"12", 3]
    ['1', '2', 3]

イテラブルアンパック演算子で新しいタプルも作れます
============================================================

.. code-block:: python

    >>> (*(1, 2), 3)
    (1, 2, 3)

ご存知ですか？ タプルの肝は **カンマ**
--------------------------------------------------

.. code-block:: python

    >>> 1, 2
    (1, 2)
    >>> 1,
    (1,)

カッコは必須じゃないんです！

カッコつけずに書けます
--------------------------------------------------

.. code-block:: python

    >>> *(1, 2), 3
    (1, 2, 3)

脱線：複数の値を返す関数はタプルを返している！
--------------------------------------------------

.. code-block:: python

    >>> def f():
    ...   return 42, "spam"
    ...
    >>> type(f())
    <class 'tuple'>

先の質問：どうなるでしょうか？
============================================================

.. code-block:: python

    >>> *(1, 2)  # doctest: +SKIP

正解は ``SyntaxError``
--------------------------------------------------

.. code-block:: python

    >>> *(1, 2)  # doctest: +SKIP
      File "<stdin>", line 1
    SyntaxError: can't use starred expression here

ですが、カンマつけると動きます
--------------------------------------------------

.. code-block:: python

    >>> *(1, 2),
    (1, 2)

脱線：辞書の場合、キーからなるタプルになります
--------------------------------------------------

.. code-block:: python

    >>> # 辞書はイテラブル
    >>> fruits_prices = {"apple": 100, "banana": 50}
    >>> *fruits_prices,
    ('apple', 'banana')

イテラブルアンパック演算子 小まとめ
============================================================

* ``*iterable,`` では **タプル** が返る
* 例えば ``[*iterable]`` でリストにできる

  * **値を加えて** 新しいリスト！ ``[*iterable, v1, v2]``

..   * これは ``[*iterable, ]`` でできるリストと等しい

アンパック演算子
--------------------------------------------------

* イテラブルアンパック演算子
* **辞書アンパック演算子**

辞書アンパック演算子
============================================================

.. code-block:: python

    >>> fruits_prices = {"apple": 100, "banana": 50}
    >>> {**fruits_prices}
    {'apple': 100, 'banana': 50}

新しい辞書を作る例
--------------------------------------------------

.. code-block:: python

    >>> {**fruits_prices, "melon": 777}
    {'apple': 100, 'banana': 50, 'melon': 777}

アンパック演算子は **複数** 使えます
============================================================

* Python 3.5から可能になりました
* `PEP 448 – Additional Unpacking Generalizations <https://peps.python.org/pep-0448/>`_

アンパック演算子を複数使う例
--------------------------------------------------

.. code-block:: python

    >>> [*(1, 2), 3, *range(2)]
    [1, 2, 3, 0, 1]
    >>> d1, d2 = {"x": 11, "y": 22}, {"v": 101, "w": 201}
    >>> {**d1, "z": -33, **d2}
    {'x': 11, 'y': 22, 'z': -33, 'v': 101, 'w': 201}

脱線：2つの辞書から新しい辞書を作る場合
--------------------------------------------------

* 知っていたので、一方の辞書をforで回さず、簡潔に書けました

.. code-block:: python

    >>> fruits_prices = {"apple": 100, "banana": 50}
    >>> {**fruits_prices, **{"melon": 777}}
    {'apple': 100, 'banana': 50, 'melon': 777}

.. revealjs-break::

* なお、Python 3.9 以降は ``|`` 演算子でもっと簡単に書けます

.. code-block:: python

    >>> fruits_prices | {"melon": 777}
    {'apple': 100, 'banana': 50, 'melon': 777}

Guidoさん曰く「私も ``{**d1, **d2}`` って書けるの忘れてた（意訳）」（`PEP 584 <https://peps.python.org/pep-0584/>`_）

まとめ🌯 Part I. アンパック演算子🌟💫🌟💫
============================================================

* ``*`` はイテラブルを、 ``**`` は辞書をアンパックする演算子
* ``*`` や ``**`` を使って、新しいタプル・リスト・辞書を作るやり方を紹介

  * PEP 448により ``*`` や ``**`` は **複数回** 使えます！
