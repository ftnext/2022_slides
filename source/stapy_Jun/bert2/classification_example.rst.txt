機械学習を使った自然言語処理の例
============================================================

* タスク： **文書分類** （テキスト分類）
* ニュースグループの投稿（英語）をカテゴリに分類する

脱線：ニュースグループって？
--------------------------------------------------

* ネットニュースのグループ
* ネットニュース≒電子掲示板
* 「今で言うTwitterみたいなものね」

ニュースグループの投稿をカテゴリに分類
--------------------------------------------------

* scikit-learnのチュートリアル `Working With Text Data <https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html>`_ から

  * 機械学習アルゴリズムや評価用ツールが集まったライブラリ（📚[3] 1.3.2）

機械学習でモデルの訓練に必要なものは
--------------------------------------------------

* データ
* 機械学習アルゴリズム

.. revealjs-break::

* データ：ニュースグループの投稿（``sklearn.datasets.fetch_20newsgroups``）
* 機械学習アルゴリズム：ニューラルネットワーク（``sklearn.neural_network.MLPClassifier``）

機械学習でテキストを扱う流れ
============================================================

1. テキストから特徴量を抽出（テキストを **数値** に変換）
2. 特徴量でモデルを訓練

データから特徴量を抽出
--------------------------------------------------

* テキスト（＝文書）＝ **文** の集合
* 個々の文は **単語** から構成される
* テキストに含まれる単語を使って、テキストを数値で表す

テキストを単語に関する数値で表す（📚[3] 5.2.3）
--------------------------------------------------

2つのテキスト

* 子供が走る
* 子供の脇を車が走る

単語：子供/走る/車/脇/が/の/を

.. revealjs-break::

* 子供が走る

  * テキストを構成する単語 子供/走る/が に何らかの数値
  * このテキストに登場しない 車/脇/の/を は0で表す

* (**子供**/ **走る** /車/脇/ **が** /の/を) = (**?** / **?** /0/0/ **?** /0/0)

.. revealjs-break::

* 子供の脇を車が走る

  * テキストを構成する単語 子供/走る/車/脇/が/の/を に何らかの数値

* (子供/走る/車/脇/が/の/を) = (?/?/?/?/?/?/?)

文中の単語の数値を算出
--------------------------------------------------

* 単語の *TFIDF* を使う
* 正の小数値
* テキストに **特徴的** な（＝多く登場し、かつ、そのテキストにしか登場しない）単語には大きい値

ニュースグループ投稿のテキスト分類
============================================================

* 分類するカテゴリは4つ
* ニュースグループの投稿のうち 2257 本を扱う
* 含まれる全ての **単語** は 35788 語

TFIDFで特徴量抽出
--------------------------------------------------

* 1つ1つの投稿は、35788個の数値の並びで表される（ベクトル）
* 投稿に含まれる単語はTFIDFの値、含まれない単語は0

.. revealjs-break::

* 例: `'OpenGL on the GPU is fast'`

.. code-block:: txt

    gpu god opengl  ... (35000語分並ぶ)
    0.67    0   0.60

openglやgpuはこのテキストに特徴的ということ

特徴量でモデルを訓練
--------------------------------------------------

* 特徴量：2257本 × 35788個の数値 & 正解ラベル
* 教師あり学習の設定で、モデルを作る
* ＝ **特徴量から投稿分類ルールを自動で求める**

モデルの気持ち
--------------------------------------------------

* このカテゴリは、これらの語のTFIDFが高いぞ！
* 別のカテゴリは、別の語たちのTFIDFが高いぞ！
* ただし、機械学習は、ルールを適用した結果、 **間違える可能性** がついて回ります

コード例
--------------------------------------------------

.. code-block:: python

    from sklearn.datasets import fetch_20newsgroups
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.neural_network import MLPClassifier

    categories = ["alt.atheism", "soc.religion.christian", "comp.graphics", "sci.med"]

    twenty_train = fetch_20newsgroups(  # ニュースグループの投稿4カテゴリ分（正解ラベル付き）
        subset="train", categories=categories, shuffle=True, random_state=42
    )
    tfidf_vect = TfidfVectorizer()
    X_train_tfidf = tfidf_vect.fit_transform(twenty_train.data)  # TFIDFで特徴量抽出

    clf = MLPClassifier()
    clf.fit(X_train_tfidf, twenty_train.target)

モデルの実力、見せてもらおう！
--------------------------------------------------

短い投稿をモデルで分類してみます

.. code-block:: txt

    'God is love' -> soc.religion.christian
    # 宗教カテゴリに分類された

    'OpenGL on the GPU is fast' -> comp.graphics
    # コンピュータカテゴリに分類された

英語と日本語の違い
--------------------------------------------------

* 英語は **空白で単語が区切られて** いる

  * そのまま ``sklearn.feature_extraction.text.TfidfVectorizer`` に入力できる

* 日本語ではまず単語を区切る必要がある（先に示した *分かち書き*）
