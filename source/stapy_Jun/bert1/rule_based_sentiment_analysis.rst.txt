自然言語処理の例
============================================================

* タスク： **感情分析**
* 1つのやり方を示しますが、他のやり方も全然ありえます

感情分析タスク
--------------------------------------------------

* 文書が **ポジティブかネガティブか** を判定

  * 👉（単純な文書として）この文はポジティブ？それともネガティブ？

* 極性判定とも言われる

『吾輩は猫である』を感情分析
--------------------------------------------------

.. code-block:: txt

    吾輩は猫である。
    名前はまだ無い。
    どこで生れたかとんと見当がつかぬ。

文で区切られたテキストがあるとします（用意する過程はAppendix）

僕が考えた最強の感情分析ルール（ref: 📚[3] 5.2.5）
============================================================

* 文は **単語** から構成される
* ポジティブな単語／ネガティブな単語の **数** で文の感情を判断してみる
* 例：この文は10語からできていて、ポジティブな単語が3、ネガティブな単語が1

ポジティブな単語、ネガティブな単語の一覧
--------------------------------------------------

* **日本語極性評価辞書**
* https://www.cl.ecei.tohoku.ac.jp/Open_Resources-Japanese_Sentiment_Polarity_Dictionary.html から入手可能

.. revealjs-break::

* **tsvファイル** として読み込む（Pythonのcsvモジュール）

.. code-block:: tsv

    ネガ（経験）	あきらめる
    ネガ（評価）    あざとい
    ポジ（経験）    あこがれる
    ポジ（評価）    あか抜ける

単語から付与する文の感情スコア
--------------------------------------------------

* 文書の極性＝ **単語の極性の総和**

  * ポジティブな単語があれば+1
  * ネガティブな単語があれば-1
  * （極性辞書にない単語は何もしない）

文の感情スコア例
--------------------------------------------------

* 10語からできた文
* ポジティブな単語が **3**、ネガティブな単語が **1**
* 感情スコアは+2（ ``+3+(-1)`` ）

『吾猫』の感情分析
--------------------------------------------------

* ポジティブ・ネガティブな単語の一覧が手元にある（先の辞書）
* 文も手元にある
* *どうやって文を単語に分ける？*

日本語の文を単語に分ける
============================================================

* 日本語は文の中の単語が区切られていない
* 単語に分けるために **形態素解析** する

形態素解析＝単語分割＋品詞付与（📚[1] 2-5）
--------------------------------------------------

* 単語分割＝分かち書き
* 品詞：名詞、動詞など

分かち書きの例
--------------------------------------------------

.. code-block:: txt

    吾輩/は/猫/で/ある/。
    名前/は/まだ/無い/。
    どこ/で/生れ/た/か/と/んと/見当/が/つか/ぬ/。

*fugashi (MeCab) + unidic の結果*

品詞付与のイメージ
--------------------------------------------------

.. code-block:: txt

    ウケる	動詞,一般,,,下一段-カ行,連体形-一般,ウケル,受ける,ウケる,ウケル,ウケる,ウケル,和,"","","","","","",用,ウケル,ウケル,ウケル,ウケル,"2","C1","",849106612396737,3089

*MeCab + unidic*

コンピュータで形態素解析
============================================================

* MeCab
* Pythonライブラリ

「オープンソース 形態素解析エンジン」MeCab
--------------------------------------------------

    言語, 辞書,コーパスに依存しない汎用的な設計

* https://taku910.github.io/mecab/
* :command:`mecab` コマンドで単語分割と品詞付与できる

Pythonで形態素解析
--------------------------------------------------

* ライブラリにより、 **Pythonから** MeCabを使える
* ``fugashi`` を紹介（ラッパーライブラリ）
* 他の言語でも https://taku910.github.io/mecab/bindings.html

``fugashi`` による分かち書き
--------------------------------------------------

.. code-block:: python

    from fugashi import Tagger

    tagger = Tagger("-Owakati")
    
    texts = ["吾輩は猫である。", "名前はまだ無い。", "どこで生れたかとんと見当がつかぬ。"]
    for text in texts:
        print("/".join(word.surface for word in tagger(text)))

付与する品詞情報の利用例
--------------------------------------------------

* 文中の単語は活用されている（例：ウケた）
* 品詞情報を使って、辞書に載っている形式＝ **原形に戻せる** （例：ウケる） ※極性評価辞書の関係
* 今回はunidicという辞書を使っています

原形に揃える例
--------------------------------------------------

.. code-block:: txt

    我が輩/は/猫/だ/有る/。
    名前/は/未だ/無い/。
    何処/で/生まれる/た/か/と/うんと/見当/が/付く/ず/。

fugashi (MeCab) + unidic の結果

参考 ``fugashi`` で原形に戻して分かち書き
--------------------------------------------------

.. code-block:: python

    from fugashi import Tagger

    tagger = Tagger("-Owakati")
    
    texts = ["吾輩は猫である。", "名前はまだ無い。", "どこで生れたかとんと見当がつかぬ。"]
    for text in texts:
        print("/".join(word.feature.lemma for word in tagger(text)))

極性辞書の都合で、原形が必要

ルールを決めて『吾輩は猫である』の文を感情分析
============================================================

1. **形態素解析** で文を単語に分ける
2. 日本語極性評価辞書を読み込む
3. ポジティブ／ネガティブな *単語を数えて* 文の感情スコアとする

『吾輩は猫である』の感情分析結果
--------------------------------------------------

.. code-block:: txt

    # 0
    吾輩は猫である。
    名前はまだ無い。
    どこで生れたかとんと見当がつかぬ。

    # ポジティブ 3 （まあわかる）
    これは背のすらりとした撫肩の恰好よく出来上った女で、着ている薄紫の衣服も素直に着こなされて上品に見えた。

    # ポジティブ 3 （あれ？）
    背といい毛並といい顔の造作といいあえて他の猫に勝るとは決して思っておらん。

    # ネガティブ -2 （まあわかる）
    死んでからああ残念だと墓場の影から悔やんでもおっつかない。
