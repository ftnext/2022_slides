自然言語処理とは
============================================================

* 自然言語（Natural Language）を処理する（Processing）
* **NLP** とも呼ばれる

自然言語（📚[1] 1-1）
--------------------------------------------------

* 私たちがふだん書いたり話したりする言語（例：日本語、英語）
* 人間の歴史の中で *自然* に発達してきた

自然言語ではない言語（📚[1] 1-1）
--------------------------------------------------

* プログラミング言語
* 人工言語（例： `エスペラント語 <https://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%B9%E3%83%9A%E3%83%A9%E3%83%B3%E3%83%88>`_ ）
* e.t.c.

自然言語処理（📚[2] 1-1）
--------------------------------------------------

自然言語の関わる問題を **コンピュータで解く**

自然言語処理で扱う **問題＝タスク**
--------------------------------------------------

幅広いタスクがある

* 例：漢字かな変換（PC・スマホで入力できるのもNLP）
* 他の例はこのトークの中でも示します

自然言語処理と機械学習
============================================================

タスクをコンピュータで解く上で、 *機械学習* も使われる

アプローチの変化：人手から機械学習へ（📚[1] 1-3）
--------------------------------------------------

* 自然言語処理はコンピュータが誕生した1940年代からある（翻訳）
* 当初は人手でルールを整備（≒if文いっぱい）
* 1990年代から、機械学習を用いたアプローチ（統計的自然言語処理）が登場

機械学習について簡単に（📚[3] 1.2.1）
--------------------------------------------------

    大量のデータから、機械学習アルゴリズムによってデータの特性を見つけて予測などを行う計算式の塊を作る

.. revealjs-break::

* 作られる計算式の塊＝ **モデル**
* モデルを作る（＝訓練する＝ルールを **自動** で求める）ために

  * 大量の **データ** を用意
  * 機械学習アルゴリズムを指定

自然言語処理のタスクは、機械学習でいう **分類** タスク
------------------------------------------------------------

* 教師あり学習：データに **正解ラベル** がある
* 正解ラベルはカテゴリ

  * この後出す例：ニュースグループのカテゴリ（宗教、コンピュータ、など）

分類（※教師あり学習一般に該当）
--------------------------------------------------

* モデルで予測したい変数（＝目的変数）は正解ラベル（カテゴリ）
* *特徴量* （＝説明変数）を使って、モデルを訓練
* ※機械学習の用語の説明は📚[3] 1.2.3をどうぞ

機械学習でテキストを扱うには（📚[2] 1-2）
--------------------------------------------------

1. テキストからタスクを解くのに有用な特徴量を抽出する

  * **テキストを数値に変換** する必要がある（次の話）

2. 特徴量でモデルを訓練

機械学習を使った自然言語処理の例
============================================================

* タスク： **テキスト分類**
* ニュースグループの投稿をカテゴリに分類する

脱線：ニュースグループって？
--------------------------------------------------

* ネットニュースのグループ
* ネットニュース≒電子掲示板
* 「今で言うTwitterみたいなものね」

ニュースグループの投稿をカテゴリに分類
--------------------------------------------------

* scikit-learnのチュートリアル `Working With Text Data <https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html>`_

  * 機械学習アルゴリズムや評価用ツールが集まったライブラリ（📚[3] 1.3.2）

機械学習でモデルの訓練に必要なものは
--------------------------------------------------

* データ
* 機械学習アルゴリズム

.. revealjs-break::

* データ：ニュースグループの投稿（`sklearn.datasets.fetch_20newsgroups`）
* 機械学習アルゴリズム：サポートベクターマシン（`sklearn.svm.SVC`）

データから特徴量を抽出
--------------------------------------------------

* **テキストを数値に変換** して特徴量とする
* 投稿を数値を並べて表す

  * 今回は数値として単語の *TFIDF* を使うとする

TFIDFを使った特徴量のイメージ
--------------------------------------------------

* 全投稿に含まれる単語の数（約35000）だけ **数値を並べる**

  * 1つ1つの投稿は、35000個の数値の並びで表される（ベクトル）

.. revealjs-break::

* 投稿に含まれる単語はTFIDFの値、含まれない単語は0
* 例: `'OpenGL on the GPU is fast'`

.. code-block:: txt

    gpu god opengl  ... (35000語分並ぶ)
    0.67    0   0.60

TFIDFのイメージ
--------------------------------------------------

* TFIDFは正の小数（要裏とり）
* TFIDFが大きいほど、その投稿を *特徴づける* 単語（詳しくはAppendixへ TODO）

  * 先の例だと、openglやgpuはその投稿にしか現れないということ

モデルの気持ち
--------------------------------------------------

* このカテゴリは、これらの語のTFIDFが高いぞ！
* 別のカテゴリは、別の語たちのTFIDFが高いぞ！
* ただし、機械学習は、ルールを適用した結果、 **間違える可能性** がついて回ります

コード例
--------------------------------------------------

TODO includeして示す TfidfVectorizerなど（ファイルへのリンクも埋め込みたい）

英語と日本語の違い
--------------------------------------------------

* 英語は空白で単語が区切られている

  * そのまま `sklearn.feature_extraction.text.TfidfVectorizer` に入力できる

* 日本語ではまず単語を区切る必要がある（*分かち書き*）👉この後の例
