5️⃣関数と ``*`` その2： *可変長* 引数
============================================================

関数定義における *可変長* 引数
--------------------------------------------------

* (A)可変長位置引数（引数に ``*`` を付ける）
* (B)可変長キーワード引数（引数に ``**`` を付ける）

ふだんよく使う **あの関数から** 始めましょう

組み込み関数 `print <https://docs.python.org/ja/3/library/functions.html#print>`_
----------------------------------------------------------------------------------------------------

.. code-block:: python

    >>> print("We (Uzabase) are hiring!")  # 位置引数1個
    We (Uzabase) are hiring!
    >>> print()  # 位置引数0個
    <BLANKLINE>
    >>> print("Hello", "PyCon", "JP", "2022")  # 位置引数4個
    Hello PyCon JP 2022

引数を **何個でも** 渡そう

``print`` のドキュメントによると
--------------------------------------------------

.. code-block:: python

    print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)

* 引数 ``*objects``
* これが *可変長位置引数*

5️⃣-🅰️ ``*`` を付けた引数
--------------------------------------------------

* 「任意の個数の位置引数が与えられる」引数（`用語集「仮引数」 <https://docs.python.org/ja/3/glossary.html#term-parameter>`_）
* ``*args`` には **0個以上** の位置引数が与えられる（オプションになっている！）
* ``*`` を付けた引数の次の引数からは **キーワード専用** になる

``*`` を付けた引数を持つ関数を定義してみる
--------------------------------------------------

.. code-block:: python

    >>> def f(*args):
    ...     print(type(args))

``*`` を付けた引数はタプルを指す
--------------------------------------------------

.. code-block:: python

    >>> f(1, 2, 3)
    <class 'tuple'>
    >>> f()
    <class 'tuple'>

何個でも位置引数を受け取れる関数！
--------------------------------------------------

.. code-block:: python

    >>> def f(*args):
    ...     print(f"{args=}")

f-stringの ``=`` 指定子（`What's New In Python 3.8 <https://docs.python.org/ja/3/whatsnew/3.8.html#f-strings-support-for-self-documenting-expressions-and-debugging>`_）

呼び出し例
--------------------------------------------------

.. code-block:: python

    >>> f(1, 2, 3)
    args=(1, 2, 3)
    >>> f()
    args=()

では、何個でもキーワード引数を与えられる関数は？
============================================================

* 組み込みの `dict <https://docs.python.org/ja/3/library/functions.html#func-dict>`_

.. code-block:: python

    >>> dict(apple=100, banana=50)
    {'apple': 100, 'banana': 50}
    >>> dict()
    {}

``dict`` のドキュメントによると
--------------------------------------------------

.. code-block:: python

    dict(**kwarg)

* ``**kwarg`` これが *可変長キーワード引数*
* なお、（組み込み関数のドキュメントに載ってますが）dictはクラスです

5️⃣-🅱️ ``**`` を付けた引数
--------------------------------------------------

* 「任意の個数のキーワード引数が与えられる」引数（`用語集「仮引数」 <https://docs.python.org/ja/3/glossary.html#term-parameter>`_）
* ``**kwargs`` には **0個以上** のキーワード引数が与えられる（オプションになっている！）

``**`` を付けた引数を持つ関数を定義してみる
--------------------------------------------------

.. code-block:: python

    >>> def f(**kwargs):
    ...     print(type(kwargs))

``**`` を付けた引数は辞書を指す
--------------------------------------------------

.. code-block:: python

    >>> f(apple=100, banana=50)
    <class 'dict'>
    >>> f()
    <class 'dict'>

何個でもキーワード引数を受け取れる関数！
--------------------------------------------------

.. code-block:: python

    >>> def f(**kwargs):
    ...     print(f"{kwargs=}")

呼び出し例
--------------------------------------------------

.. code-block:: python

    >>> f(apple=100, banana=50)
    kwargs={'apple': 100, 'banana': 50}
    >>> f()
    kwargs={}

可変長引数を持った関数
============================================================

.. code-block:: python

    >>> def f(*args, **kwargs):
    ...     print(f"{args=}")
    ...     print(f"{kwargs=}")

可変長位置引数も可変長キーワード引数も

復習： ``args`` はタプル、 ``kwargs`` は辞書
--------------------------------------------------

.. code-block:: python

    >>> f(1, 2, 3, a=4, b=5)
    args=(1, 2, 3)
    kwargs={'a': 4, 'b': 5}

5️⃣-🅰️ 手元にはイテラブル
--------------------------------------------------

.. code-block:: python

    >>> numbers = [1, 2, 3]  # リストはシーケンスなので、イテラブル
    >>> f(numbers)
    args=([1, 2, 3],)
    kwargs={}

* ``args`` は要素1のタプル
* ``args[0]`` が ``[1, 2, 3]``

リストの要素全部を位置引数として渡したい
--------------------------------------------------

.. code-block:: python

    >>> f(???)  # doctest: +SKIP
    args=(1, 2, 3)
    kwargs={}

* ``args`` が要素3のタプルとなってほしい

インデックスを指定してできなくもないけれど😫
--------------------------------------------------

.. code-block:: python

    >>> f(numbers[0], numbers[1], numbers[2])
    args=(1, 2, 3)
    kwargs={}

``numbers`` の要素数が変わったらこのままだと動かない

**イテラブルアンパック演算子** でできます！
--------------------------------------------------

.. code-block:: python

    >>> f(*numbers)  # イテラブルアンパック演算子！
    args=(1, 2, 3)
    kwargs={}

イテラブルの要素が位置引数として渡された

他のイテラブルでも
--------------------------------------------------

.. code-block:: python

    >>> f(*(4, 5))  # タプルはシーケンスなので、イテラブル
    args=(4, 5)
    kwargs={}
    >>> f(*{"apple": 100, "banana": 50})  # 辞書はイテラブル
    args=('apple', 'banana')
    kwargs={}

5️⃣-🅱️ 手元には辞書
--------------------------------------------------

.. code-block:: python

    >>> fruits_prices = {"apple": 100, "banana": 50}

辞書のキーと値を ``キー=値`` と名前付きで全部可変長キーワード引数 ``kwargs`` に渡したい

**辞書アンパック演算子** でできます！
--------------------------------------------------

.. code-block:: python

    >>> f(**fruits_prices)  # 辞書アンパック演算子！
    args=()
    kwargs={'apple': 100, 'banana': 50}

2種のアンパック演算子は一緒に使えます！
--------------------------------------------------

.. code-block:: python

    >>> f(*numbers, **fruits_prices)  # ただし、この順に限る
    args=(1, 2, 3)
    kwargs={'apple': 100, 'banana': 50}

（再びの）アンパック演算子は **一度に複数** 使える！
============================================================

* `PEP 448 <https://peps.python.org/pep-0448/>`_ 「一度に複数使える」は関数の引数にも該当します

アンパック演算子を一度に複数使う例
--------------------------------------------------

.. code-block:: python

    >>> f(*range(2), 2, *[3, 4])
    args=(0, 1, 2, 3, 4)
    kwargs={}

    >>> f(**{"z": 1}, y=2, **{"x": 3})
    args=()
    kwargs={'z': 1, 'y': 2, 'x': 3}

まとめ🥟：関数と ``*`` その2： 可変長引数
============================================================

* 関数定義で ``*`` を付けて、可変長 **位置** 引数

  * **イテラブルアンパック** 演算子 ``*`` で要素を全部渡せる

* 関数定義で ``**`` を付けて、可変長 **キーワード** 引数

  * **辞書アンパック** 演算子 ``**`` で ``キー=値`` で全部渡せる

さら知り🏃‍♂️：海外のPyConより
--------------------------------------------------

* nikkieが勝手にPythonのYodaと思っている、Reuven氏のトーク
* `PyCon APAC 2022 「Function Dissection Lab」 <https://youtu.be/b8kYh1hJPR0>`_
* 関数 **オブジェクト** で関数の仕組み（デフォルト値などなど）が明らかにされ、実に面白い🙌
