.. _6.7. 二項算術演算 (binary arithmetic operation): https://docs.python.org/ja/3/reference/expressions.html#binary-arithmetic-operations
.. _6.5. べき乗演算 (power operator): https://docs.python.org/ja/3/reference/expressions.html#the-power-operator

二項算術演算子としての ``*``, ``**``
============================================================

``*`` は **乗算** （掛け算）
--------------------------------------------------

.. code-block:: python

    >>> 2 * 6
    12
    >>> 6 * 2
    12

`6.7. 二項算術演算 (binary arithmetic operation)`_

``**`` は **べき乗** （パワー）
--------------------------------------------------

.. code-block:: python

    >>> 5 ** 3  # 5 * 5 * 5
    125

`6.5. べき乗演算 (power operator)`_

べき乗演算子の優先順位
--------------------------------------------------

.. code-block:: python

    >>> -1 ** 2  # -(1 ** 2) 左側にある単項演算子 - より ** が先
    -1
    >>> (-1) ** 2
    1

`6.5. べき乗演算 (power operator)`_

乗算を整理
--------------------------------------------------

* 数値どうし（例で見た）
* 整数と *シーケンス*

`6.7. 二項算術演算 (binary arithmetic operation)`_

シーケンスとは（`用語集 <https://docs.python.org/ja/3/glossary.html#term-sequence>`_ より）
----------------------------------------------------------------------------------------------------

* リスト
* 文字列
* タプル
* など（※自作もできます）

整数インデクスでアクセスでき、長さを返す

整数とシーケンスの乗算
--------------------------------------------------

.. code-block:: python

    >>> "🐍🌟💫" * 2
    '🐍🌟💫🐍🌟💫'
    >>> 3 * (1, 3, 5)
    (1, 3, 5, 1, 3, 5, 1, 3, 5)
    >>> [9, 8] * -2  # 負の繰り返し数では空
    []

**繰り返し** 操作

二項算術演算子って **どう実装** されているんでしょう？
============================================================

わたし、気になります！

特殊メソッド（`用語集 <https://docs.python.org/ja/3/glossary.html#term-special-method>`_）
----------------------------------------------------------------------------------------------------

    ある型に特定の操作、例えば加算をするために Python から暗黙に呼び出されるメソッド。

**乗算・べき乗の特殊メソッド** があるんです！

特殊メソッド（`用語集 <https://docs.python.org/ja/3/glossary.html#term-special-method>`_）
----------------------------------------------------------------------------------------------------

    | この種類のメソッドは、メソッド名の最初と最後にアンダースコア 2 つがついています。
    | 特殊メソッドについては `特殊メソッド名 <https://docs.python.org/ja/3/reference/datamodel.html#specialnames>`_ で解説されています。

乗算の特殊メソッド ``__mul__``
--------------------------------------------------

``*`` （乗算）は `__mul__ <https://docs.python.org/ja/3/reference/datamodel.html#object.__mul__>`_ を呼んでいます

.. code-block:: python

    >>> 2 * 6
    12
    >>> (2).__mul__(6)  # カッコつけずに 2.__mul__(6) は小数とパースされてSyntaxError
    12

べき乗の特殊メソッド ``__pow__``
--------------------------------------------------

``**`` （べき乗）は `__pow__ <https://docs.python.org/ja/3/reference/datamodel.html#object.__pow__>`_ を呼んでいます

.. code-block:: python

    >>> 5 ** 3
    125
    >>> (5).__pow__(3)
    125

組み込み関数 `pow <https://docs.python.org/ja/3/library/functions.html#pow>`_
----------------------------------------------------------------------------------------------------

    二引数の形式 ``pow(base, exp)`` は、冪乗演算子を使った ``base**exp`` と等価です。

.. code-block:: python

    >>> pow(5, 3)
    125
    >>> (5).__pow__(3)
    125

あなただけの乗算
--------------------------------------------------

* クラスを定義するときに、特殊メソッドを **オーバーライド**
* ``__mul__`` をオーバーライドすれば、乗算の動きをカスタマイズできます

オリジナルの乗算：文字列どうし
--------------------------------------------------

TODO カップリングの掛け算 ``CouplableStr``

補足：これらの用語は同じ意味
--------------------------------------------------

* 特殊メソッド（special method）
* `マジックメソッド <https://docs.python.org/ja/3/glossary.html#term-magic-method>`_ *くだけた同義語*
* ダンダーメソッド（ダンダー＝ **d** ouble **under** score `参照 <https://docs.python.org/ja/3/library/dataclasses.html#dataclasses.dataclass>`_）

まとめ🥟：二項算術演算子としての ``*``, ``**``
============================================================

* 乗算の ``*`` ・べき乗の ``**``
* 裏にあるのは特殊メソッド

  * 乗算は ``__mul__``
  * べき乗は ``__pow__``

.. _Python実践入門: https://gihyo.jp/book/2020/978-4-297-11111-3

さらに知りたい方へ：『 `Python実践入門`_ 』がオススメ
------------------------------------------------------------

* 8.2 特殊メソッド ── Pythonが暗黙的に呼び出す特別なメソッド
* 特殊メソッドを学ぶのにオススメのリソース知っている方はぜひ教えてください！🙏

さら知り：過去のPyCon JPからのオススメトーク
--------------------------------------------------

* 2017年 `len()関数がオブジェクトの長さを手にいれる仕組み <https://www.slideshare.net/shimizukawa/how-does-python-get-the-length-with-the-len-function>`_

  * https://youtu.be/aich6wqftkA

* ``pow`` 関数が ``__pow__`` を呼び出すように、 ``len`` 関数は ``__len__`` を呼び出しているのです！（**Adapter** パターン）

さら知り： `__rmul__` と `__rpow__`
--------------------------------------------------

TODO
