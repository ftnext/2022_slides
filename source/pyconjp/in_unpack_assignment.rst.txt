2️⃣アンパック代入と ``*``
============================================================

代入
--------------------------------------------------

.. code-block:: python

    >>> t = ("🖤", "🎀")

私はおそらく、親の顔を見るより代入してます

シーケンスのアンパック
--------------------------------------------------

.. code-block:: python

    >>> first, second = t  # 前頁より t はタプル ("🖤", "🎀") を指してます
    >>> first
    '🖤'
    >>> second
    '🎀'

`Pythonチュートリアル 5.3. タプルとシーケンス <https://docs.python.org/ja/3/tutorial/datastructures.html#tuples-and-sequences>`_

.. revealjs-break::

タプルに限らずシーケンスはアンパックできます

.. code-block:: python

    >>> first, second = ["🖤", "🎀"]  # リストはシーケンス
    >>> first, second = "🖤🎀"  # 文字列はシーケンス

シーケンスのアンパックの書き方
--------------------------------------------------

.. code-block:: python

    >>> first, second = ("🖤", "🎀")

* 等号の左辺の **変数の数** と、右辺のシーケンスの **長さ** を同じにする

シーケンスのアンパックのすゝめ
--------------------------------------------------

    アンパックを使えば、シーケンスにインデックスを使わずに済むので、コードが明確になり、見た目がすっきりする。

`Effective Python 第2版`_ 項目6

シーケンスのアンパック、いいですよね
--------------------------------------------------

.. code-block:: python

    >>> first, second, third, fourth = ("🍞", "📶", "👑", "🐑")

変数をシーケンスの長さだけ並べる必要がある🤨

catch-allアンパック
============================================================

``*`` 付きの変数！

.. code-block:: python

    >>> first, second, *others = ("🍞", "📶", "👑", "🐑")

catch-allアンパック
--------------------------------------------------

.. code-block:: python

    >>> first, second, *others = ("🍞", "📶", "👑", "🐑")
    >>> first
    '🍞'
    >>> second
    '📶'
    >>> others  # シーケンスの残りの要素を持ったリスト
    ['👑', '🐑']

``*`` 付きの変数は **リスト** を指す

左辺のどの変数にも ``*`` を付けられます！
--------------------------------------------------

.. code-block:: python

    >>> first, *others, last = ("🍞", "📶", "👑", "🐑")
    >>> others
    ['📶', '👑']
    >>> *others, second_to_last, last = ("🍞", "📶", "👑", "🐑")
    >>> others
    ['🍞', '📶']

``*`` 付きの変数に該当する要素がないときは **空リスト**
------------------------------------------------------------

.. code-block:: python

    >>> first, *others, last = ("🖤", "🎀")
    >>> first
    '🖤'
    >>> last
    '🎀'
    >>> others
    []

利用シーン：シーケンスを重複のないように分割
------------------------------------------------------------

    リストを重複のないように分割する場合、catch-allアンパックは、スライスやインデックスを使うよりもエラーを起こす危険が少ない。（`Effective Python 第2版`_ 項目13）

インデックスやスライスの **添字誤りは発生しない書き方** ですよね

小さなCSVファイルをヘッダと残りの行に分けることも
------------------------------------------------------------

.. code-block:: python

    # https://github.com/bslatkin/effectivepython/blob/4ae6f3141291ea137eb29a245bf889dbc8091713/example_code/item_13.py#L144-L147
    it = generate_csv()
    header, *rows = it  # 注: rowsが指すリストを作るのにすべてのデータがメモリに展開されている
    print('CSV Header:', header)
    print('Row count: ', len(rows))

私はあんまり使いません（CSVに限らず大きいファイルをジェネレータで扱う）

まとめ🥟：アンパック代入と ``*``
============================================================

* シーケンスの長さと同じだけ変数を並べる *シーケンスのアンパック*
* ``*`` を付けた変数に **残りをまとめ** られる：catch-allアンパック
