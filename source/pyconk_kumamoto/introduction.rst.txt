質問：「文」って意識しますか❔
========================================

本題へ： **文** に立ち返ってPython再入門

``if`` 文の例
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/roland.py
    :language: python
    :lines: 5-9
    :linenos:

ref: https://zenn.dev/kuramapommel/books/introduce_polymorphism/viewer/chapter2

IMO：文は意識しない？ 1/2
--------------------------------------------------

* Pythonを書いているとき「私、いま文書いてる」とはあまり思わない
* 書いているプログラムで意識するのは *行* （例：レビューで 「N行目の...」）
* （文は、プログラムの1つ以上の行からできます）

再掲： ``if`` 分の例
--------------------------------------------------

.. code-block:: python
    :linenos:
    :emphasize-lines: 3,5

    name = input("名前を入力してください: ")
    if name == "ローランド":
        print("俺か")  # nameが"ローランド"のときの分岐
    else:
        print("俺以外か")  # nameが"ローランド"でないときの分岐

IMO：文は意識しない？ 2/2
--------------------------------------------------

* 入門時に ``if`` 文・ ``for`` 文と教わった記憶（例 `Pythonチュートリアル "制御フロー" <https://docs.python.org/ja/3/tutorial/controlflow.html>`_）
* 制御フローは「分岐」や「反復」という **構造** として捉えている

では、文は誰のためにあるのか？
========================================

IMO：文は **機械** 🤖のためにある
--------------------------------------------------

高水準言語／機械語
========================================

High level / Low level

高水準言語／機械語
--------------------------------------------------

.. list-table::

    * - 高水準言語（例：Python）
      - 機械語
    * - High level
      - Low level
    * - 人間が読む
      - 機械が読む

人間が高水準言語を書けるためには
--------------------------------------------------

* 機械が高水準言語を機械語に変換している
* つまり、機械が高水準言語を *読んで* いる

**機械** がプログラムの構造を理解する
--------------------------------------------------

そのための **文**

計算機科学における「コンパイル」
========================================

参考：『コンピュータシステムの理論と実装』

コンパイルの例
--------------------------------------------------

* ソースコード（Pythonで書かれた）
* バイトコード

``if`` 文の例でコンパイルを見る
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/roland.py
    :language: python
    :lines: 5-9
    :linenos:

コンパイルの2要素
--------------------------------------------------

1. 字句解析
2. 抽象構文木

字句解析（tokenize）
--------------------------------------------------

* ソースコードは文字列
* 字句（トークン）＝意味を持つ最小単位

字句解析の例
--------------------------------------------------

TODO command

抽象構文木
--------------------------------------------------

* AST (Abstract Syntax Trees)
* 一連のトークンからプログラムの構造＝木を出力

抽象構文木の例
--------------------------------------------------

TODO command

**文法** （このトークの主題）
--------------------------------------------------

* 人間が文を書くときに則るルール
* トークンから抽象構文木を作る際にも前提となる

文に立ち返ってPython再入門では
========================================

* Pythonのコロンやインデントの意味を共有
* BNF記法を読んで一緒に味わう

文に立ち返ってPython再入門では
--------------------------------------------------

* コロンやインデントの意味： **文の構成要素を機械に伝えている**
* BNF記法を読んで一緒に味わう

文に立ち返ってPython再入門では
--------------------------------------------------

* コロンやインデントの意味：文の構成要素を機械に伝えている
* BNF記法を読んで一緒に味わう： **簡潔かつ抜け漏れのない表現**

お品書き：文に立ち返ってPython再入門
--------------------------------------------------

* Pythonにおける文
* 文を定義する（拡張BNF記法）
* 文の定義を味わう
