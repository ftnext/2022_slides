質問：Pythonを書くとき、「文」って意識しますか❔
==================================================

本題へ： **文** に立ち返ってPython再入門（LT1本くらいの導入です）

``if`` 文の例（:file:`roland.py`）
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/roland.py
    :language: python
    :lines: 5-9
    :linenos:

ref: https://zenn.dev/kuramapommel/books/introduce_polymorphism/viewer/chapter2

:file:`roland.py` 実行例
--------------------------------------------------

.. code-block:: shell

    $ python roland.py
    名前を入力してください: nikkie
    俺以外か

    $ python roland.py
    名前を入力してください: ローランド
    俺か

IMO：文は意識しない？
--------------------------------------------------

* Pythonを書いているとき「私、いま文書いてる」とはあまり思わない
* 書いているプログラムで意識するのは *行* （例：レビューで 「N行目の...」）
* （文は、プログラムの1つ以上の行からできます）

IMO：意識しているのは、文が作り出す構造
--------------------------------------------------

* 入門時に ``if`` 文・ ``for`` 文と教わった記憶（例 `Pythonチュートリアル "制御フロー" <https://docs.python.org/ja/3/tutorial/controlflow.html>`_）
* 制御フローは「分岐」や「反復」という **構造** として捉えている

構造を捉える例（:file:`roland.py`）
--------------------------------------------------

.. code-block:: python
    :linenos:
    :emphasize-lines: 3,5

    name = input("名前を入力してください: ")
    if name == "ローランド":
        print("俺か")  # nameが"ローランド"のときの分岐
    else:
        print("俺以外か")  # nameが"ローランド"でないときの分岐

では、文は誰のためにあるのか？
========================================

どうやら私たちプログラマは文を意識していなさそう

IMO：文は **機械** 🤖のためにある
--------------------------------------------------

高水準（高級）／低水準（低級）
========================================

High level / Low level

高水準言語／機械語
--------------------------------------------------

.. list-table::

    * - High level
      - Low level
    * - 高水準言語（例：Python）
      - 機械語
    * - 人間👩‍💻👨‍💻が読み書き
      - 機械🤖が読み書き

人間が高水準言語でプログラムを書けるためには
--------------------------------------------------

* 機械が高水準言語を機械語に *変換* している
* つまり、機械は（機械語だけでなく） **高水準言語も読んで** いる

**機械** がプログラムの構造を理解する
--------------------------------------------------

そのための **文**

別の視点：計算機科学における「コンパイル」
==================================================

参考：『 `コンピュータシステムの理論と実装 <https://www.oreilly.co.jp/books/9784873117126/>`_ 』

コンパイルの例
--------------------------------------------------

* ソースコード（Pythonで書かれた）
* バイトコード（インタプリタの内部表現。pycファイルにキャッシュ。 ref: `用語集 <https://docs.python.org/ja/3/glossary.html#term-bytecode>`_）

``if`` 文の例でコンパイルを見る
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/roland.py
    :language: python
    :lines: 5-9
    :linenos:

コンパイルから2点ピックアップ
--------------------------------------------------

1. 字句解析
2. 抽象構文木

字句解析（tokenize）
--------------------------------------------------

* ソースコードは文字列
* **字句（トークン）** ＝意味を持つ最小単位

字句解析の例（:command:`python -m tokenize -e roland.py`）
------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/token_roland.txt
    :language: txt
    :lines: 8-15

抽象構文木
--------------------------------------------------

* AST (Abstract Syntax Trees)
* 機械は、プログラムの構造を **木** で表す
* 一連のトークンから抽象構文木を出力

抽象構文木の例（:command:`python -m ast -m exec roland.py`）
------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/ast_roland.txt
    :language: txt
    :lines: 11-19

**文法** （このトークの主題）
--------------------------------------------------

* 人間が文を書くときに則るルール
* トークンから抽象構文木を作る際にも前提となる

本トーク「文に立ち返ってPython再入門」では
==================================================

* Pythonのコロンやインデントの意味を共有
* BNF記法を読んで一緒に味わう

.. revealjs-break::

* コロンやインデントの意味： **文の構成要素を機械に伝えている**
* BNF記法を読んで一緒に味わう

.. revealjs-break::

* コロンやインデントの意味：文の構成要素を機械に伝えている
* BNF記法を読んで一緒に味わう： **簡潔かつ抜け漏れのない表現**

お品書き：文に立ち返ってPython再入門
--------------------------------------------------

1. Pythonにおける文
2. 文を定義する（拡張BNF記法）
3. 文の定義を味わう
