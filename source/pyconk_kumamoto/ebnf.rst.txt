文を定義する（拡張BNF記法）
========================================

拡張したBNF記法
========================================

    字句解析と構文に関する記述では、BNF 文法記法に手を加えたものを使っています。

    各規則は name (規則によって定義されているものの名前) と ::= から始まります。

`1.2. 本マニュアルにおける表記法 <https://docs.python.org/ja/3/reference/introduction.html#notation>`_

注意：Python 3.9からはPEG記法
--------------------------------------------------

TODO

拡張BNF記法の読み方
========================================

拡張BNF記法における記号
------------------------------------------------

* ``|``
* ``*``
* ``+``
* ``[]``
* ``()``
* ``"``
* 『　』（※空白です）

``|``
------------------------------------------------

    複数の選択項目を分かち書きするときに使います

「または」

``*``
------------------------------------------------

    直前にくる要素のゼロ個以上の繰り返しを表します

``+``
------------------------------------------------

    プラス (+) は一個以上の繰り返し

``*`` に似て、直前に来る要素の一個以上の繰り返し

``[]``
------------------------------------------------

    角括弧 ([ ]) に囲われた字句は、字句がゼロ個か一個出現する
    (別の言い方をすれば、囲いの中の字句はオプションである)

``()``
------------------------------------------------

    字句のグループ化には丸括弧を使います。

``"``
------------------------------------------------

    リテラル文字列はクオートで囲われます。

空白
------------------------------------------------

    空白はトークンを分割しているときのみ意味を持ちます。

拡張BNF記法の例
========================================

前提「lc_letter は 'a' から 'z' までの何らかの文字一字」

.. productionlist:: notation
   name: lc_letter (lc_letter | "_")*

``(lc_letter | "_")*``
------------------------------------------------

* ``|``： ``lc_letter`` またはリテラルの ``_``（例： ``z`` , ``_``）
* 丸括弧によるグループ化
* ``*`` により、「``lc_letter`` またはリテラルの ``_``」の0個以上の繰り返し（例： ``z`` , ``w_`` , ``prq``）

``lc_letter (lc_letter | "_")*``
------------------------------------------------

* ``lc_letter`` の後に、「``lc_letter`` またはリテラルの ``_``」が0個以上の繰り返されることを表す
* 例： ``a`` , ``b_`` , ``cde``
* この規則を ``name`` として定義した

小まとめ🥟：文を定義する（拡張BNF記法）
========================================

* 拡張BNF記法の記号の意味を確認
* Pythonの複合文の定義を読む準備が整った
