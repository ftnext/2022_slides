Part II. 文を定義する（拡張BNF）
========================================

.. _1.2. 本マニュアルにおける表記法: https://docs.python.org/ja/3/reference/introduction.html#notation

拡張したBNF
========================================

    字句解析と構文に関する記述では、BNF 文法記法に手を加えたものを使っています。（ `1.2. 本マニュアルにおける表記法`_）

EBNFとも呼ぶドキュメントもありました（Extended Backus–Naur Form）

拡張したBNF（承前）
--------------------------------------------------

    各規則は name (規則によって定義されているものの名前) と ::= から始まります。（ `1.2. 本マニュアルにおける表記法`_）

注意⚠️：Python 3.9からはPEG記法
--------------------------------------------------

* python.jp `Python 3.9 の with文 <https://www.python.jp/pages/with-statement-3.9.html>`_

    Python 3.9 ではPython言語のパーザが置き換えられ

* `PEP 617 -- New PEG parser for CPython <https://www.python.org/dev/peps/pep-0617/>`_

  * Parsing Expression Grammar（解析表現文法）

拡張BNFの読み方
========================================

`1.2. 本マニュアルにおける表記法`_ に記載があります。

拡張BNFにおける記号
------------------------------------------------

* ``|``
* ``*``
* ``+``
* ``[]``
* ``()``
* ``"``
* 『　』（※空白です）

``|``
------------------------------------------------

    複数の選択項目を分かち書きするときに使います

「または」

``"a" | "b"`` ➡ ``"a"``, ``"b"``

``*``
------------------------------------------------

    直前にくる要素のゼロ個以上の繰り返しを表します

``"a"*`` ➡ ``""``, ``"a"``, ``"aaaa"``, ...

``+``
------------------------------------------------

    プラス (+) は一個以上の繰り返し

``*`` に似て、直前に来る要素の一個以上の繰り返し

``"a"+`` ➡ ``"a"``, ``"aaaa"``, ...

``[]``
------------------------------------------------

    | 角括弧 ([ ]) に囲われた字句は、字句がゼロ個か一個出現する
    | (別の言い方をすれば、囲いの中の字句はオプションである)

``["a"]`` ➡ ``""``, ``"a"``

``()``
------------------------------------------------

    字句のグループ化には丸括弧を使います。

``"``
------------------------------------------------

    リテラル文字列はクオートで囲われます。

空白
------------------------------------------------

    空白はトークンを分割しているときのみ意味を持ちます。

拡張BNFの例
========================================

前提「lc_letter は 'a' から 'z' までの何らかの文字一字（ ``"a"..."z"``）」

.. productionlist:: notation
   name: lc_letter (lc_letter | "_")*

規則 ``name`` はどんな文字列を表す？

もっとも内側 ``lc_letter | "_"``
------------------------------------------------

* ``lc_letter`` または ``"_"``
* ＝ 'a' から 'z' までの文字一字、または （リテラルの）'_'
* 例： ``z`` , ``_``

``(lc_letter | "_")``
------------------------------------------------

* 丸括弧によるグループ化
* 'a' から 'z' までの文字一字、または '_' をグループに

``(lc_letter | "_")*``
------------------------------------------------

* ``*`` は0個以上の繰り返し
* ＝ グループ ``(lc_letter | "_")`` の0個以上の繰り返し
* 例： ``''`` （空文字列）, ``z`` , ``w_`` , ``_prq``

``name ::= lc_letter (lc_letter | "_")*``
------------------------------------------------

* ``lc_letter`` の後に、 ``(lc_letter | "_")*`` が続く
* ＝ ``lc_letter`` の後に「 ``lc_letter`` またはリテラルの ``_``」を0個以上の繰り返す
* 例： ``a`` , ``b_`` , ``cde``
* 1文字目に ``_`` は来られない

小まとめ🥟：文を定義する（拡張BNF）
========================================

* 拡張BNFの記号の意味を確認
* Pythonの **複合文の定義を読む準備** が整った

お品書き：文に立ち返ってPython再入門
--------------------------------------------------

1. ✅ Pythonにおける文
2. ✅ 文を定義する（拡張BNF）
3. 文の定義を味わう
