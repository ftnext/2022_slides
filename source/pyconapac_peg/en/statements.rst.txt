Part I. Pythonにおける文
========================================

用語集「文」
========================================

    A statement is part of a suite (a “block” of code).

`Python用語集 文 (en) <https://docs.python.org/3/glossary.html#term-statement>`_

文はスイート (コードの"ブロック") の一部です。（nikkie訳）

.. 私の好きなPythonドキュメントの1つに「用語集」があります。
    けっこう用語集を引くんですけど、「文」についても用語集を引くと
    「文はスイートの一部です」と書かれています。
    スイートとはコードのブロックです。

.. _8. 複合文: https://docs.python.org/ja/3/reference/compound_stmts.html#compound-statements

今回は「複合文」にフォーカス
--------------------------------------------------

    複合文には、他の文 (のグループ) が入ります

言語リファレンス `8. 複合文`_

.. リファレンスでは単純文と複合文に分かれていますが、今回は複合文にフォーカスします。
    「複合文には、他の文（のグループ）が入ります」

複合文の例（ ``if`` 文）
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:

.. 複合文の例は先ほども見たif文です。

複合文のイメージは制御フロー
--------------------------------------------------

    複合文は、中に入っている他の文の実行の制御に何らかのやり方で影響を及ぼします。（ `8. 複合文`_）

``if`` 文だと分岐（実行する／しない）

.. 複合文にはifの他に、tryやwithなどあるんですけれどイメージとしては制御フローかと思います。
    「中に入っている他の文の実行」を制御します

複合文の構成要素
========================================

* 節
* ヘッダ
* スイート

.. 複合文を構成する要素として、節とヘッダとスイートの3つがあります

節
--------------------------------------------------

    複合文は、一つ以上の '節 (clause)' からなります。（ `8. 複合文`_）

.. 節とは何かというと、複合文は一つ以上の節からなると、複合文のリファレンスに書いてありまして

例の ``if`` 文を構成する節　その1
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:
    :emphasize-lines: 2-3

.. 2行目のifと続く3行目が1つ目の節

例の ``if`` 文を構成する節　その2
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:
    :emphasize-lines: 4-5

.. 4行目のelseと続く5行目が2つ目の節で、2つの節から構成されていたんだとなります。

節の構成要素
--------------------------------------------------

    節は、ヘッダと 'スイート (suite)' からなります。（ `8. 複合文`_）

.. 節の構成要素として、ヘッダとスイートというものがありまして

ヘッダ
--------------------------------------------------

    各節のヘッダは一意に識別するキーワードで始まり、コロンで終わります。（ `8. 複合文`_）

.. 「ヘッダは一意に識別するキーワードで始まり、コロンで終わ」る

キーワード
--------------------------------------------------

* いくつかの **トークン** （字句）
* 例

  * ``if``
  * ``else``
  * ``for``
  * ``def``

.. キーワードって何？となったんですけど、これは特定のトークンですね。
    ここに挙げた以外にもclassなどがあります

ヘッダはキーワードで始まりコロンで終わる
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:
    :emphasize-lines: 2,4

.. ヘッダはキーワードで始まりコロンで終わるということで
    例えば2行目を見るとifというキーワードで始まりコロンで終わるのでヘッダなんです。
    4行目もelseというキーワードで始まりコロンで終わるのでヘッダなんです。

スイート
--------------------------------------------------

    スイートは、[略]、または、ヘッダに続く行で一つ多くインデントされた文の集まりです。（ `8. 複合文`_）

.. ではスイートはなんなの？というと、リファレンスから持ってきたのですが、
    ヘッダに続く行で一つ多くインデントされた文の集まり、です。

スイートはインデントされた文の集まり
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:
    :emphasize-lines: 3,5

.. これがスイートです。
    私はドキュメントではぱっと分からなかったのですが、これを見ると3行目と5行目が一つ多くインデントされているのでスイート

スイートはインデントされた文の集まり（2文以上）
--------------------------------------------------

.. code-block:: python
    :linenos:
    :emphasize-lines: 3-4

    name = input("Input your name: ")
    if name.lower() == "mario":
        print("It's me.")
        print("Mario!")
    else:
        print("It's not Mario.")

.. 文の集まりなので複数の文を入れられます

スイート
--------------------------------------------------

    [先に紹介した形式] のスイートに限り、さらに複合文をネストできます（ `8. 複合文`_）

複合文は **再帰** 的！（複合文のスイートに別の複合文）

.. あとは、このスイートは複合文をネストできるんですね。
    複合文のスイートの中に別の複合文を入れられる

スイートに複合文をネストする例
--------------------------------------------------

.. code-block:: python
    :linenos:
    :emphasize-lines: 3-4

    name = input("Input your name: ")
    if name.lower() == "mario":
        for _ in range(3):
            print("It's me, Mario!")
    else:
        print("It's not Mario.")

.. こんな感じでif文のスイートにfor文を書いてみました。
    そのfor文にもヘッダとスイートがあってと皆さんはもう見えてくると思います。

小まとめ🥟：Pythonにおける文
========================================

* 複合文は **節** （ヘッダとスイート）からなる
* コロンはヘッダを示している！
* インデントはスイートを示している！

.. というわけでリファレンスを深ぼってみると
    複合文は節、つまりヘッダとスイートからなっていて。
    Pythonを書くときに忘れるとSyntax errorと言われるコロンとインデント、
    コロンはヘッダに、インデントはスイートに対応するわけですね。
    ふだん書いているPythonを説明できているなという感動が私はありました

.. ここまでで約4分

文の補足：用語集には続きが
========================================

    A statement is either an expression or one of several constructs with a keyword, such as if, while or for.

文は、式または、 if, while, for のようなキーワードから構成されるものです（nikkie訳）

.. もうちょっと文について補足していきますと、用語集には続きがありまして、
    文は、式または、 if, while, for のようなキーワードから構成されるもの と書いてあります。

文はどちらか
------------------------------------------------

1. 式 (an expression)
2. キーワードから構成されるもの (one of several constructs with a keyword)

.. つまり文は式のときもあるし、キーワードから構成されるときもある

キーワードの補足：予約語
========================================

.. code-block:: python

    >>> if = 1231  # 変数として使えません
      File "<stdin>", line 1
        if = 1231
           ^
    SyntaxError: invalid syntax

.. キーワードは予約語です。例えば変数として使えません

.. _Python用語集 式: https://docs.python.org/ja/3/glossary.html#term-expression

文の構成要素の1つ：式とは
========================================

    何かの値と評価される、一まとまりの構文
    (A piece of syntax which can be evaluated to some value.)

`Python用語集 式`_

.. もう一つ「文は式」と定義されていましたが、式とは何かというと
    式は「何かの値と評価される、一まとまりの構文」だそうで

用語集「式」の続き
------------------------------------------------

    言い換えると、式とは [中略] 値を返す式の要素の積み重ねです。
    (In other words, an expression is an accumulation of expression elements [...] which all return a value.)

`Python用語集 式`_

式の定義にも **再帰** ！

.. もうちょっと見ていくと 式とは値を返す式の要素の積み重ね なので
    式の定義の中に式がでていて再帰的な定義がされています。

.. _6. 式: https://docs.python.org/ja/3/reference/expressions.html

式の要素とは
------------------------------------------------

* 式の要素の1つ、リテラル（ `6. 式`_ 6.2.2）
* 例：整数 ``108`` はリテラル 👉 ``108`` は式

.. 積み重ねる式の要素をいくつか挙げると、リテラルは式です。
    リテラルには整数や文字列などいろいろありますが、この例では整数はリテラルでそれ自体が式です

さらに、式の要素
------------------------------------------------

* 式の要素の1つ、演算子（ `6. 式`_ 6.7）
* 例： ``33 - 4`` は式（リテラル、演算子、リテラル）
* 式の要素を組合せて、別の式ができる（再帰）

.. 式の要素の別の例として演算子を紹介します。
    33 - 4 は演算子を使った式です。

もう少し、式の要素
------------------------------------------------

* 関数呼び出しも、式の要素の1つ（ `6. 式`_ 6.3.4）
* 例： ``print("だんだんな〜")``

.. まだまだありますが、もう1個だけ紹介すると、関数呼び出しも式の要素の1つです。
    文字列リテラルを使ってprint関数を呼び出したこちらも式です

式自体で文（用語集で文は式のケース）
------------------------------------------------

以下の例の関数呼び出しは文でもある（スイートとして書けている）

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:
    :emphasize-lines: 3,5

.. これまでずっと見てきた例ですが、式自体で文ということで、
    スイートの3行目と5行目は関数呼び出しの式で、文だったということです

.. 補足で2分半（Part Iは6分半）
