Statements in programming
==================================================

1. **High** level / **Low** level
2. Short introduction about **compile**

.. First of all, as an introduction, I will talk two points about statements in programming.

1 **High** level / **Low** level
========================================

.. First, about High level and Low level.

High-level programming language / Machine language
------------------------------------------------------------

.. list-table::

    * - High level
      - Low level
    * - High-level programming language (e.g. Python)
      - Machine language
    * - Humans üë©‚Äçüíªüë®‚Äçüíª read and write
      - Machines ü§ñ read and write

.. This slide shows the contrast.
    Humans read and write high-level languages, such as Python and other programming languages,
    while machines read and write machine languages.

E.g. Program written in high-level language üë©‚Äçüíªüë®‚ÄçüíªÔºà:file:`mario.py`Ôºâ
--------------------------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:

.. As an example, I wrote a simple if statement program.
    It branches when the input name is Mario and when it is not.

Execute :file:`mario.py` ü§ñ
--------------------------------------------------

.. code-block:: shell

    $ python mario.py
    Input your name: nikkie
    It's not Mario.

    $ python mario.py
    Input your name: mario
    It's me, Mario!

.. In executing the script, nikkie does not match Mario, so it says "It's not Mario".
    If you type mario, it says "It's me, Mario!

For humans to write in high-level languages
--------------------------------------------------

* Humans üë©‚Äçüíªüë®‚Äçüíª read and write high-level language
* Machines ü§ñ read and write machine language

.. revealjs-fragments::

    * Machines ü§ñ **converts** program in high-level language into machine language

.. For humans to write programs in high-level languages [PRESS SPACE]
  Machines converts program written in high-level language into machine language

.. revealjs-break::

* Machines ü§ñ **read high-level languages** (not only machine language)

.. revealjs-fragments::

    * Machines ü§ñ **recognize the structure** of programs written in high-level languages

.. Machines ü§ñ read not only machine language but also high-level languages. [PRESS SPACE]
    Machines recognize the structure of programs written in high-level languages.

Statement allows machines ü§ñ to understand the structure of the program
--------------------------------------------------------------------------------

.. statement allows machines to understand the structure of the program.

2 Short introduction about **compile**
==================================================

ref: "`The Elements of Computing Systems <https://mitpress.mit.edu/books/elements-computing-systems>`_"

.. Second, let's think about compilation.
    I referred to the book "The Elements of Computing Systems".

Example of compilation
--------------------------------------------------

* Source code (written in Python)
* Bytecode (ref: `Glossary <https://docs.python.org/3/glossary.html#term-bytecode>`_)

  * internal representation in the interpreter
  * cached in .pyc files

.. I will show you an example of compilation.
    Source codes written in Python are converted into bytecode.
    bytecode is the internal representation in the interpreter and cached in .pyc files.

Compile the ``if`` statement program
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:

.. See the compilation in the if statement example.
    This is a source code.

2 steps from compile
--------------------------------------------------

1. Lexical analysis
2. Abstract Syntax Trees

.. Compilation consists of a number of steps, but I will pick up only two.
    One is lexical analysis and the other is abstract syntax tree.

2-1. Lexical analysis
--------------------------------------------------

* Source code is string.
* Parse into **tokens**, the smallest unit of meaning.

.. Source code is string.
    In Lexical analysis, machines parse source code into tokens.
    Token is the smallest unit of meaning.

e.g. Lexical analysis (:command:`python -m tokenize -e mario.py`)
--------------------------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/token_mario.txt
    :language: txt
    :lines: 9-18

.. For lexical analysis, you can use the standard Python library 'tokenize'.
    Here is the result of tokenizing the if statement.

2-2. Abstract Syntax Trees
--------------------------------------------------

* AST
* Machines handle the structure of a program as a **tree**.
* Output an abstract syntax tree from a sequence of tokens.

.. Next, let's look at Abstract Syntax Trees, also called AST.
    Machines handle the structure of a program by representing it as a **tree**.
    Machine outputs an abstract syntax tree from a sequence of tokens

e.g. AST (:command:`python -m ast -m exec mario.py`)
------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/ast_mario.txt
    :language: txt
    :lines: 11-25

.. An abstract syntax tree can be created by using the module ast from the standard library.

Two kinds of syntax
--------------------------------------------------

.. list-table::

    * - Abstract syntax
      - Concrete syntax
    * - interpreted by the interpreter
      - appearance of programming language (e.g. how to write compound statements)

.. Syntax includes abstract syntax as well as concrete syntax.
    Abstract syntax is interpreted by the interpreter.
    Concrete syntax represents the appearance of a programming language.
    Concrete syntax determines, for example, how if statement would be written

Subject is **concrete syntax**
--------------------------------------------------

* Deep dive into the current appearance of compound statements (Python 3.10.5)

.. revealjs-fragments::

    * Machine (**parser** ü§ñ) reads whether tokens match concrete syntax or not (Keyüóù is *recursion*)

.. It is concrete syntax that I will be talking this time.
    Let's dive deeply into the current appearance of compound statements in Python.
    Prior to making ASTs, the machine, called parser reads whether tokens match Python's concrete syntax or not.
    This talk will give you the viewpoint of parser

Revisit Python from statements and PEG
==================================================

* Share the meaning of colons and indents
* Read and taste PEG together

.. In this talk, I will share the meaning of colons and indents
    and we will read PEG and taste it together!

.. revealjs-break::

* Meaning of colons and indents: **tell parser components of statement**
* Read and taste PEG together

.. Colons and indents tell parser components of statement

.. revealjs-break::

* Meaning of colons and indents: tell parser components of statement
* Read and taste PEG togetherÔºö **expressed concisely and without omissions**

.. After reading PEG together, you will maybe notice concise expression without omissions
