Part III. 文の定義を味わう
========================================

構文定義を読んでみる
========================================

* `10. 完全な文法仕様 <https://docs.python.org/ja/3/reference/grammar.html>`_ 中の定義を読んでみましょう

  * `8. 複合文`_ は読む対象外です（BNFという別の表記）

* PEGの定義を読むと、**着眼点の工夫により、抜け漏れなく説明される** 感動がありました！

.. このパートでは一緒に構文定義を読んでいきます。
    ここで読むのはリファレンスの10. 完全な文法仕様にPEGで記載されているものです。
    1. 複合文はPEGとは別の表記ですので、今回は対象外とします。
    PEGにより規則の定義を読むと、こういうところに着目して簡潔にとらえて、抜けもれなく説明している！と感動しました

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg

リファレンスには、これら以外の複合文もあります

.. 一緒に読むのはこの5つです。
    リファレンスにはwithやtryなどもありますので、興味のある方はぜひトークの後に読んでみてください。

構文のPEGを読む際の前提
------------------------------------------------

* プログラムの字句解析が終わって、トークンの並びになっています
* 機械は **トークンの並びが規則に当てはまるか** をチェックしています
* ＝ここで読んだPEGに沿って書けば文法エラーにはなりません

.. 読む際の前提ですが、プログラムのtokenizeが終わっていて、トークンの並びが手元にあります。
    トークンの並びが規則に当てはまるかを機械はチェックしていまして、
    私たちはこれから機械の気持ちになって構文定義を読んでいきます。
    機械の側から理解するので、ここで読んだPEGに沿って書けば文法エラーにはならないと思います。

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg
    :emphasize-lines: 3

.. まずはif文です

.. include:: ja/definitions/if.rst.txt

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg
    :emphasize-lines: 5

.. ここで6分

.. 次はwhileです

.. include:: ja/definitions/while.rst.txt

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg
    :emphasize-lines: 4

.. 次はforです

.. include:: ja/definitions/for.rst.txt

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg
    :emphasize-lines: 2

.. あと2つです。関数定義に行きましょう

.. include:: ja/definitions/function_def.rst.txt

構文定義、積ん読！
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg
    :emphasize-lines: 6

.. 最後はmatch文を見ていきましょう

.. include:: ja/definitions/match.rst.txt

構文定義、読了！🙌
------------------------------------------------

.. literalinclude:: grammar/compound_stmt_as_lineup.gram
    :language: peg

.. 以上、一緒に5つの構文定義を読んできました

小まとめ🥟：文の定義を味わう
========================================

* PEGで書かれた複合文の定義を味わった
* **簡潔** にとらえる着眼点
* かつ、**抜け漏れなく** 表現されている

.. 複合文の定義を味わってきました。
    PEGは着眼点が興味深く、また抜けもれなく表現されていますね！
