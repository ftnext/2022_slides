Part II. 文を定義する（PEG）
========================================

Parsing Expression Grammar（解析表現文法）
==================================================

* `PEP 617 -- New PEG parser for CPython <https://www.python.org/dev/peps/pep-0617/>`_
* 実はPython 3.9からPEGベースのパーサに置き換えられた

.. PEGはParsing Expression Grammar（解析表現文法）
    PEP 617というものがありまして、CPython向けの新しいPEGパーサが導入されました。
    実はひっそりとPython 3.9からPEGベースのパーサに置き換えられています

規則を定義して文法とする
--------------------------------------------------

.. ✍️ 原文: The grammar consists of a sequence of rules of the form:
    https://peps.python.org/pep-0617/#syntax

* 記法についての一連の規則を文法とする
* PEGにおける規則の定義は以下

.. code-block:: peg

    rule_name: expression

.. PEG以前も記法についての一連の規則を定義して文法としています。
    PEGでは、rule_nameがまず来て、コロンの後にexpressionを書きます。
    expressionの書き方をこの後見ていきます

PEGの読み方
========================================

`PEP 617の「Grammar Expressions」 <https://peps.python.org/pep-0617/#grammar-expressions>`_ に記載があります。

.. 規則の定義が読めるようになるために、expression（式）の読み方を見ていきましょう。
    詳しい記載はPEP 617にもあります

PEGにおける記号 1/2
------------------------------------------------

- literals
- whitespace
- ``|``
- ``()``
- ``[]`` または ``?``

.. 記号がたくさん出てきます。これが前半部分です。
    順番に紹介していきます

literals
------------------------------------------------

* **シングルクォート** で囲む
* 例：キーワード ``'else'``

.. シングルクォートで囲ったものがリテラルになります

.. ✍️ ソフトキーワードがダブルクォートで囲まれているように見える

whitespace
------------------------------------------------

* 例 ``e1 e2``
* ``e1`` にマッチし、次に ``e2`` にマッチする
* （まず ``e1`` にマッチしなければ、 ``e1 e2`` にはマッチしない）

.. 次にwhitespaceですが、e1 space e2 とすると ``e1`` にマッチし、次に ``e2`` にマッチするを表します。
    なので ``e1`` にマッチしなければ、 ``e1 e2`` にはマッチしない

literals & whitespace
------------------------------------------------

.. code-block:: peg

    else_block: 'else' ':' block

* まずリテラルの ``'else'`` にマッチ
* 次にリテラルの ``':'`` にマッチ
* その後に ``block`` という規則にマッチ

.. リテラルとwhitespaceを組み合わせた例として、else_blockという規則を読んでみましょう。
    まずリテラルの ``'else'`` にマッチし
    次にリテラルの ``':'`` にマッチし
    その後に ``block`` という規則にマッチするものがelse_blockという規則ということです

``|``
------------------------------------------------

* 例 ``e1 | e2``
* ``e1`` *または* ``e2``
* ただし、 **順序つき** 選択 （左が先。PEGの特徴）

.. 続いてパイプです。
    ei pipe e2で e1 または e2と「または」を表すのですが、
    PEGの特徴として順序付きの選択、左が先に来ます

``|`` の書き方
------------------------------------------------

* ``rule_name: first_rule second_rule`` と **同等**

.. code-block:: peg

    rule_name:
        | first_rule
        | second_rule

* ``first_rule`` の前の ``|`` は書式のフォーマットのため

.. pipeを使った規則は横に続けて書いてあることもありますが、
    規則ごとに改行を入れることもできます。
    その際、最初の式の前にpipeを入れます。
    意味上の違いはなくて単に書式のフォーマットのためのものです

``()``
------------------------------------------------

* グループ
* 例 ``( e )`` ： ``e`` にマッチ
* 例 ``( e1 e2 )`` ： ``e1 e2`` にマッチ

.. 続いて parenthesis 、これはグループを表します。
    parenthesisの中にeが入っているとeにマッチしますし、
    e1 e2が入っているとe1 e2にマッチします

.. ✍️ TODO 例えば繰り返しと一緒に使うと追加してもいいかも

``[]`` または ``?``
------------------------------------------------

* **オプショナル** （＝任意）でマッチ
* 例 ``[e]`` （``e?`` も同じ）
* ``e`` にマッチしてもいいし、しなくてもいい（＝任意で ``e`` にマッチ）

.. 次は2つとも同じ意味ですが、brucketとquestionです。
    bracket e または e question はeにマッチしてもいいししなくてもいいを表します

.. ここまでで3分（少し回る）

PEGにおける記号 2/2
------------------------------------------------

- ``*``
- ``+``

  - join (``s.e+``)

- lookahead

  - ``&``
  - ``!``

- ``~``

.. では後半部分の記号も見ていきましょう

``*``
------------------------------------------------

* 例 ``e*`` ： ``e`` の **0回以上の出現** （0回以上の繰り返し）にマッチ
* 例 ``(e1 e2)*`` ： ``(e1 e2)`` （グループ）の0回以上の繰り返し

.. asteriskは0回以上の出現にマッチします
    e*でeが0回以上
    e1 e2のグループにasteriskをつけるとe1 e2が0回以上出現にマッチします

``+``
------------------------------------------------

* 例 ``e+`` ： ``e`` の **1回以上の出現** （1回以上の繰り返し）にマッチ
* 例 ``(e1 e2)+`` ： ``(e1 e2)`` の1回以上の繰り返し

.. plusは1回以上の出現にマッチします。
    asteriskは0回以上ですが、plusは1回以上です。

``s.e+``
------------------------------------------------

* ``s`` で **区切られた** ``e`` の1回以上の出現（``(e (s e)*)`` と同等）
* 例 ``','.e+``
* カンマで区切られた1個以上のe： ``e`` ／ ``e,e`` ／ ``e,e,e``

.. plusの拡張として、s.e+ とすると``s`` で **区切られた** ``e`` の1回以上の出現
    これはPythonの文字列のjoinメソッドに似ているかなと思います。
    comma period e plus はカンマで区切られた1個以上のeを表します。

先読み
------------------------------------------------

* 入力を消費せずにパースできるかを見る
* 成功 👉 肯定先読み
* 失敗 👉 否定先読み

.. 続いて先読みです。ここまでは入力を消費してマッチするかをみていました。
    先読みでは入力を消費せずにマッチするかを見ます。
    マッチに成功した場合が肯定先読みで失敗した場合は否定先読みです。

.. TODO brush upの余地あり

``&``
------------------------------------------------

* 肯定先読み
* ``&e`` ： ``e`` にパースできたら成功（マッチするために必要だが、マッチで **消費されない**）

.. andが肯定先読みで、
    and eとなると、eとマッチしたら成功です。
    ただしeにマッチしたといってそこの字句は消費されません。
    例は次で出します

``!``
------------------------------------------------

* 否定先読み（パースできたら失敗）
* 例 ``primary: atom !'.' !'(' !'['``

  * ``a`` を ``atom`` としたとき、 ``a.`` でも ``a(`` でも ``a[`` でもなければマッチ

.. exclamationが否定先読みです。
    マッチすると失敗で、マッチしないことを期待しています。
    例として、primaryという規則を見ていきましょう。
    否定先読みとして period parenthesis bracket とありますが、
    ``a`` を ``atom`` としたとき、 ``a.`` でも ``a(`` でも ``a[`` でもない場合マッチしていて
    atomの次の字句は消費されていません

``~``
------------------------------------------------

* コミット
* 例 ``rule_name: '(' ~ some_rule ')' | some_alt``

  * ``'('`` がマッチしたので ``'(' some_rule ')'`` とマッチするかを見てマッチしなかった場合、 ``some_alt`` は考慮しない
  * コミットにより、順序付き選択の **他が選択されない**

.. 最後に tilde これがコミットを表します。
    rule_nameはparenthesisの中にコミットがあります。
    手元のトークンの並びが、parenthesisで始まったとします。
    some_ruleの方の式とマッチするかを見ていきますが、
    仮にマッチしなかったとしてもコミットのtildeによって順序付き選択の別の選択肢 some_alt は考慮されません

PEGの読み方 完全理解
========================================

- literals
- whitespace
- ``|``
- ``()``
- ``[]`` または ``?``

.. ここまでで読み方を一通り（続）

.. revealjs-break::

- ``*``
- ``+``

  - join (``s.e+``)

- lookahead

  - ``&``
  - ``!``

- ``~``

.. 紹介してきました

PEGの世界はもっと広い！
------------------------------------------------

* 規則の *返り値の型* を扱える
* **Grammar actions** （Python 3.10 `Better error messages <https://docs.python.org/ja/3/whatsnew/3.10.html#better-error-messages>`_ の秘密）
* ぜひ `PEP 617 <https://www.python.org/dev/peps/pep-0617/>`_ のチェックを！

.. ここで紹介したのはごくごく一部で他にも規則で返り値の型を定義できます。
    あと、Grammar actionがすごくて、Python 3.10からsyntax errorのメッセージがカイゼンされましたが
    この秘密がGrammar actionにあります。
    興味を持った方はぜひPEP 617を見てみてください。

小まとめ🥟：文を定義する（PEG）
========================================

* PEGの記号の読み方（意味）を確認
* Pythonの **複合文の定義を読む準備** が整った

.. 以上が々を定義するパートです。
    PEGの各記号の読み方、すなわち意味を確認してきました。
    これで複合文の定義を読む準備が整ったことになります
