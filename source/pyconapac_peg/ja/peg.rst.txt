Part II. 文を定義する（PEG）
========================================

Parsing Expression Grammar（解析表現文法）
==================================================

* `PEP 617 -- New PEG parser for CPython <https://www.python.org/dev/peps/pep-0617/>`_
* 実はPython 3.9からPEGベースのパーサに置き換えられた

規則を定義して文法とする
--------------------------------------------------

.. 原文: The grammar consists of a sequence of rules of the form:
    https://peps.python.org/pep-0617/#syntax

* 記法についての一連の規則を文法とする
* PEGにおける規則の定義は以下

.. code-block:: peg

    rule_name: expression

PEGの読み方
========================================

`PEP 617の「Grammar Expressions」 <https://peps.python.org/pep-0617/#grammar-expressions>`_ に記載があります。

PEGにおける記号 1/2
------------------------------------------------

- literals
- whitespace
- ``|``
- ``()``
- ``[]`` または ``?``

literals
------------------------------------------------

* **シングルクォート** で囲む
* 例：キーワード ``else``

.. ソフトキーワードがダブルクォートで囲まれているように見える

whitespace
------------------------------------------------

* 例 ``e1 e2``
* ``e1`` にマッチし、次に ``e2`` にマッチする
* （まず ``e1`` にマッチしなければ、 ``e1 e2`` にはマッチしない）

literals & whitespace
------------------------------------------------

.. code-block:: peg

    else_block: 'else' ':' block

* まずリテラルの ``'else'`` にマッチ
* 次にリテラルの ``':'`` にマッチ
* その後に ``block`` という規則にマッチ

``|``
------------------------------------------------

* 例 ``e1 | e2``
* ``e1`` *または* ``e2``
* ただし、 **順序つき** 選択 （左が先。PEGの特徴）

``|`` の書き方
------------------------------------------------

* ``rule_name: first_rule second_rule`` と **同等**

.. code-block:: peg

    rule_name:
        | first_rule
        | second_rule

* ``first_rule`` の前の ``|`` は書式のフォーマットのため

``()``
------------------------------------------------

* グループ
* 例 ``( e )`` ： ``e`` にマッチ
* 例 ``( e1 e2 )`` ： ``e1 e2`` にマッチ

``[]`` または ``?``
------------------------------------------------

* **オプショナル** （＝任意）でマッチ
* 例 ``[e]`` （``e?`` も同じ）
* ``e`` にマッチしてもいいし、しなくてもいい（＝任意で ``e`` にマッチ）

PEGにおける記号 2/2
------------------------------------------------

- ``*``
- ``+``

  - join (``s.e+``)

- lookahead

  - ``&``
  - ``!``

- ``~``

``*``
------------------------------------------------

* 例 ``e*`` ： ``e`` の **0回以上の出現** （0回以上の繰り返し）にマッチ
* 例 ``(e1 e2)*`` ： ``(e1 e2)`` （グループ）の0回以上の繰り返し

``+``
------------------------------------------------

* 例 ``e+`` ： ``e`` の **1回以上の出現** （1回以上の繰り返し）にマッチ
* 例 ``(e1 e2)+`` ： ``(e1 e2)`` の1回以上の繰り返し

``s.e+``
------------------------------------------------

* ``s`` で **区切られた** ``e`` の1回以上の出現（``(e (s e)*)`` と同等）
* 例 ``','.e+``
* カンマで区切られた1個以上のe： ``e`` ／ ``e,e`` ／ ``e,e,e``

先読み
------------------------------------------------

* 入力を消費せずにパースできるかを見る
* 成功 👉 肯定先読み
* 失敗 👉 否定先読み

``&``
------------------------------------------------

* 肯定先読み
* ``&e`` ： ``e`` にパースできたら成功（マッチするために必要だが、マッチで **消費されない**）

``!``
------------------------------------------------

* 否定先読み（パースできたら失敗）
* 例 ``primary: atom !'.' !'(' !'['``

  * ``a`` を ``atom`` としたとき、 ``a.`` でも ``a(`` でも ``a[`` でもなければマッチ

``~``
------------------------------------------------

* コミット
* 例 ``rule_name: '(' ~ some_rule ')' | some_alt``

  * ``'('`` がマッチしたので ``'(' some_rule ')'`` とマッチするかを見てマッチしなかった場合、 ``some_alt`` は考慮しない
  * コミットにより、順序付き選択の **他が選択されない**

PEGの読み方 完全理解
========================================

- literals
- whitespace
- ``|``
- ``()``
- ``[]`` または ``?``

.. revealjs-break::

- ``*``
- ``+``

  - join (``s.e+``)

- lookahead

  - ``&``
  - ``!``

- ``~``

PEGの世界はもっと広い！
------------------------------------------------

* 規則の *返り値の型* を扱える
* **Grammar actions** （Python 3.10 `Better error messages <https://docs.python.org/ja/3/whatsnew/3.10.html#better-error-messages>`_ の秘密）
* ぜひ `PEP 617 <https://www.python.org/dev/peps/pep-0617/>`_ のチェックを！

小まとめ🥟：文を定義する（PEG）
========================================

* PEGの記号の読み方（意味）を確認
* Pythonの **複合文の定義を読む準備** が整った
