``if`` 文
========================================

    if 文は、条件分岐を実行するために使われます:

`8.1. if 文 <https://docs.python.org/ja/3/reference/compound_stmts.html#the-if-statement>`_

``if`` 文の構文を（PEGを使わずに）どう伝えますか❔
----------------------------------------------------------

少し考えてみてください

私の戦略：場合分け
------------------------------------------------

* elseの有無

  * ``if ...``
  * ``if ... else ...``

場合分け、抜け漏れの確認ツライ😫
------------------------------------------------

* elifの個数（0個／1個／複数）

  * ``if ... elif ...``
  * ``if ... elif ... elif ...``
  * ``if ... elif ... else ...``
  * ``if ... elif ... elif ... else ...``

PEGでは、こう
------------------------------------------------

.. literalinclude:: grammar/if.gram
    :language: peg

``block`` とは
------------------------------------------------

.. code-block:: peg

    block:
        | NEWLINE INDENT statements DEDENT
        | simple_stmts

``block`` の構成要素
------------------------------------------------

.. code-block:: peg

    statements: statement+
    statement: compound_stmt  | simple_stmts
    # simple_stmtsを手短に言うと、複数のsimple_stmt

``block``
------------------------------------------------

.. code-block:: peg

    # 改行しインデントされた複数の文（単純文でも複合文でもよい）、
    # または、改行せず続く複数の単純文
    block:
        | NEWLINE INDENT statements DEDENT
        | simple_stmts

味わう ``if`` 文 1/2
------------------------------------------------

.. literalinclude:: grammar/if.gram
    :language: peg
    :lines: 1-3

* キーワード ``if`` で始まるヘッダと続くブロックからなる節は **必須**
* ``if`` の後に、 **elifの有無** で考えている

味わう ``if`` 文 2/2
------------------------------------------------

.. literalinclude:: grammar/if.gram
    :language: peg
    :lines: 4-6

* ``elif`` の後に、``elif`` がさらに続くときと続かないとき

PEGで表した ``if`` 文
------------------------------------------------

* ``if`` 節は必須
* **elif節の有無** に着目している！
* ``else`` 節はオプショナル扱い（``[]``）
* この考え方で抜け漏れがない！

脱線： ``named_expression``
========================================

``if`` 節や ``elif`` 節のヘッダに登場する ``named_expression`` について

``named_expression``
------------------------------------------------

.. code-block:: peg

    # 代入式、または（代入式でない）式
    named_expression:
        | assignment_expression
        | expression !':='

    assignment_expression:
        | NAME ':=' ~ expression

代入式はPython 3.8 (2019/10 release) から
------------------------------------------------

    大きな構文の一部として、変数に値を割り当てる新しい構文 := が追加されました。
    この構文は セイウチの目と牙 に似ているため、「セイウチ演算子」の愛称で知られています。

https://docs.python.org/ja/3/whatsnew/3.8.html#assignment-expressions

代入式の例（Python 3.8 What's Newより）
------------------------------------------------

    代入式により len() 関数を二重に呼びだすことを回避しています:

.. code-block:: python

    if (n := len(a)) > 10:
        print(f"List is too long ({n} elements, expected <= 10)")

.. この例のパースは group gt_bitwise_or
    https://scrapbox.io/nikkie-memos/named_expression%E3%82%92%E3%83%91%E3%83%BC%E3%82%B9%E3%81%99%E3%82%8B%E4%BE%8B

``named_expression`` の構文を読んで
------------------------------------------------

* 代入式 ``:=`` は制御フローの構文を変えるほどの **大きな変更** と気づいた
* ``if`` 文のほか、 ``while`` 文の定義にも登場します
