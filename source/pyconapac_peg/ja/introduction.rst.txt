質問：Pythonを書くとき、「文」って意識しますか❔
==================================================

本題へ： **文** とPEGからPython再入門（LT1本くらいの導入です）

.. では、本題に入っていきましょう。
    質問なんですが、みなさんPythonを書くときに「文」というものを意識しますでしょうか？

``if`` 文の例（:file:`mario.py`）
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:

.. 例としてif文をもってきました。
    入力した名前がMarioのときとそうでないときで分岐します

:file:`mario.py` 実行例
--------------------------------------------------

.. code-block:: shell

    $ python mario.py
    Input your name: nikkie
    It's not Mario.

    $ python mario.py
    Input your name: mario
    It's me, Mario!

.. 実行すると、nikkieはMarioと一致しないので"It's not Mario."
    marioと入力すると"It's me, Mario!"と表示されます

IMO：文は意識しない？
--------------------------------------------------

* Pythonを書いているとき「私、いま文書いてる」とはあまり思わない
* 書いているプログラムで意識するのは *行* （例：レビューで 「N行目の...」）
* （文は、プログラムの1つ以上の行からできます）

.. このプログラムをはじめとして、Pythonを書いている時「いまめっちゃif文、for文を書いている」とは思わないかもしれないと思っていまして
    逆に書いているプログラムで意識するのは行。
    例えばレビューで何行目をこうしてはどうでしょうかと言ったりします

IMO：意識しているのは、文が作り出す構造
--------------------------------------------------

* 入門時に ``if`` 文・ ``for`` 文と教わった記憶（例 `Pythonチュートリアル "制御フロー" <https://docs.python.org/ja/3/tutorial/controlflow.html>`_）
* 制御フローは「分岐」や「反復」という **構造** として捉えている

.. 私の見方としては、文は意識していないんですけれども、文が作り出す構造を意識しているのかなと思っていまして
    例えばPythonに誰しも入門するとき、if文、for文という制御フローがあると教わると思うんですけど
    制御フロー、つまり分岐の構造や反復の構造と捉えているのかなと思います。

構造を捉える例（:file:`mario.py`）
--------------------------------------------------

.. code-block:: python
    :linenos:
    :emphasize-lines: 3,5

    name = input("Input your name: ")
    if name.lower() == "mario":
        print("It's me, Mario!")  # "mario"のときの分岐（nameを小文字にして比較）
    else:
        print("It's not Mario.")  # "mario"でないときの分岐

.. 例の構造は分岐の構造なんですが、
    marioと入力されたときは3行目、
    marioでなかったら5行目に分岐すると構造を捉えているかなと思います

では、文は誰のためにあるのか？
========================================

どうやら私たちプログラマは文を意識していなさそう

.. ここまで見てきて私たちプログラマは文を意識していないのではないかとうっすらと思い始めました。
    では、文は誰のためにあるのでしょうか？

IMO：文は **機械** 🤖のためにある
--------------------------------------------------

.. 私の意見として、文は **機械** のためにあるのかなと考えています

高水準（高級）／低水準（低級）
========================================

High level / Low level

.. High level / Low level 高水準／低水準という話をします

高水準言語／機械語
--------------------------------------------------

.. list-table::

    * - High level
      - Low level
    * - 高水準言語（例：Python）
      - 機械語
    * - 人間👩‍💻👨‍💻が読み書き
      - 機械🤖が読み書き

.. 高水準言語と機械語という対比なんですけれども
    人間が読み書きするのは高水準言語、例えばPythonや他のプログラミング言語、
    機械が読み書きするのは機械語。
    このように住み分けられているのかもしれませんが

人間が高水準言語でプログラムを書けるためには
--------------------------------------------------

* 機械が高水準言語を機械語に *変換* している
* つまり、機械は（機械語だけでなく） **高水準言語も読んで** いる

.. 人間が高水準言語でプログラムを書けるためには、機械の側が高水準言語を機械語に *変換* しています。
    つまり、機械は（機械語だけでなく） **高水準言語も読んで** いるわけです

**機械** がプログラムの構造を理解する
--------------------------------------------------

そのための **文**

.. **機械** がプログラムの構造を理解する、そのための **文** と考えられるかなと思います

別の視点：計算機科学における「コンパイル」
==================================================

参考：『 `コンピュータシステムの理論と実装 <https://www.oreilly.co.jp/books/9784873117126/>`_ 』

.. もう一つ別の視点として、『コンピュータシステムの理論と実装』という本を参考に
    コンパイルについて考えてみましょう

コンパイルの例
--------------------------------------------------

* ソースコード（Pythonで書かれた）
* バイトコード（インタプリタの内部表現。pycファイルにキャッシュ。 ref: `用語集 <https://docs.python.org/ja/3/glossary.html#term-bytecode>`_）

.. コンパイルの例として、
    Pythonで書かれたソースコードをバイトコードに変換します。
    バイトコードはインタプリタの内部表現で、pycファイルにキャッシュされます。

``if`` 文の例でコンパイルを見る
--------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/mario.py
    :language: python
    :lines: 2-6
    :linenos:

.. ``if`` 文の例でコンパイルを見ます。
    これはソースコードですね

コンパイルから2点ピックアップ
--------------------------------------------------

1. 字句解析
2. 抽象構文木

.. コンパイルはいくつものステップでなっているんですけれども、2点だけピックアップします。
    1つは字句解析、もう一つは抽象構文木です

字句解析（tokenize）
--------------------------------------------------

* ソースコードは文字列
* **字句（トークン）** ＝意味を持つ最小単位

.. 字句解析（tokenize）ですけれど、
    ソースコードはひとまとまりの文字列、
    その文字列をトークン、意味を持つ最小単位に解析します

字句解析の例（:command:`python -m tokenize -e mario.py`）
------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/token_mario.txt
    :language: txt
    :lines: 9-18

.. Pythonの標準ライブラリにはtokenizeというライブラリがありましてそれを使って字句解析できます。
    これがif文の部分を字句解析した結果です

抽象構文木
--------------------------------------------------

* AST (Abstract Syntax Trees)
* 機械は、プログラムの構造を **木** で表す
* 一連のトークンから抽象構文木を出力

.. 続いて抽象構文木、Abstract Syntax Treesですけれども
    機械は、プログラムの構造を **木** で表して扱います。
    トークない頭した一連のトークンから抽象構文木を出力

抽象構文木の例（:command:`python -m ast -m exec mario.py`）
------------------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/ast_mario.txt
    :language: txt
    :lines: 11-25

.. これは標準ライブラリからastというモジュールを使うことで実施できます

構文にも2種類ある
--------------------------------------------------

.. list-table::

    * - 抽象構文
      - 具象構文
    * - インタプリタが解釈
      - プログラミング言語の見た目（例：複合文はこう書く）

.. ここでお伝えした構文なんですが、抽象構文のほかに具象構文と2種類あります。
    抽象構文はAbstract Syntaxとインタプリタが解釈するものです。
    一方具象構文はプログラミング言語の見た目を表します。if文だったらこう

このトークの主題は **具象構文**
--------------------------------------------------

* Pythonの複合文の現在の **見た目** について深堀ります（Python 3.10.5）
* 機械は文法に沿って具象構文を読んでます（鍵🗝は「再帰」）

.. このトークで扱っていくのは具象構文です。
    Pythonの複合文のいまの **見た目** について深堀っていきます
    機械は文法に沿って具象構文を読んでいるので、このトークで機械の気持ちの一端を知ることになるかなと思います

.. TODO 機械＝パーサ

本トーク「文とPEGからPython再入門」では
==================================================

* Pythonのコロンやインデントの意味を共有
* PEGを読んで一緒に味わう

.. Pythonのコロンやインデントの意味を共有しますし、PEGを読んで一緒に味わっていきましょう

.. revealjs-break::

* コロンやインデントの意味： **文の構成要素を機械に伝えている**
* PEGを読んで一緒に味わう

.. コロンやインデントは **文の構成要素を機械に伝える** ためのものです

.. revealjs-break::

* コロンやインデントの意味：文の構成要素を機械に伝えている
* PEGを読んで一緒に味わう： **簡潔かつ抜け漏れのない表現**

.. そしてPEGで表現された文法を読むことで簡潔かつ抜け漏れのない表現だなあと一端を知ることになるかと思います
