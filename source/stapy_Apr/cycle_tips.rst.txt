サイクルを回すために
========================================

* 情報収集➡️モデル化➡️検証というプログラミング学習サイクルを回すための **tips** を **3つ** 紹介
* プログラミングを学んでいる方向け（これから学ぶ方にはピンとこないかも）

1. 写経しながら **考える**
========================================

* 写経＝プログラムをまねて入力＝書き写す
* 情報収集の方法の1つ

『`エンジニアの知的生産術`_』より（第1章）
--------------------------------------------------

    書き写しながら、「あれ、これ前にも出てきたな」とか「いつものパターンに似ているけどちょっと違うな」とか考えることが大事です

写経しながら考える：nikkieの場合
--------------------------------------------------

* 「**こんな書き方できるのか！**」という気付き🤩
* モデル（自分の理解）の更新につながる（誤解していた、少し深く分かった）

『`エンジニアの知的生産術`_』第1章 参考
--------------------------------------------------

* なぜこうなっている？ こう書き換えたら？ 写経しながら控えておく
* 分からないことも書き出しましょう

「（写経はせずに）コピペでよくない？」
========================================

Google検索などして見つけたサンプルコードをコピー & ペースト

nikkieとコピペ
--------------------------------------------------

* コピペすればサンプルコードは動く
* ぶっちゃけ、入門時はよくやっていました
* サンプルコードを複数組合せたら動かなくなったぞ！？

*IMO* コピペはオススメしません
--------------------------------------------------

* 情報収集➡️モデル化➡️検証のサイクルから **遠ざかる** 感覚
* コピペはモデル化（共通パターンの発見）をスキップする
* そのため、動かない時に仮説が出せず、直しづらい（デメリットもご認識を！）

nikkie コピペ封印
--------------------------------------------------

* 「自力で書けない箇所はコピペしない」
* （＝書けるところだけコピペしてよい）
* 参考 https://github.com/ftnext/2019_slides/blob/master/django_girls_Nov_copy_paste/PITCHME.md

*IMO* コピペしないを増やしていきましょう
--------------------------------------------------

* コピペをすると早く解決できるが、モデル化が薄くなりがち
* コピペしないと **時間はかかるが、理解が深まる**

  * 得たモデルは次の同様のケースに活きる

.. https://github.com/ftnext/2019_slides/blob/master/django_girls_Nov_copy_paste/PITCHME.md

2. 一歩一歩
========================================

* 「写経とかコピペしないとか、プログラミングって泥臭くない？」
* *IMO* **着実に一歩一歩** 積み上げていきましょう

.. _画像引用元: https://commons.wikimedia.org/wiki/File:Alanf777_Lcd_fig07.png

学習曲線は直線ではない（`画像引用元`_）
--------------------------------------------------

.. image:: ../_static/stapy_Apr/202204_wiki_learning_curve.png

私たちのイメージとのギャップ
--------------------------------------------------

.. image:: ../_static/stapy_Apr/202204_edited_learning_curve.drawio.png

.. https://en.wikipedia.org/wiki/Learning_curve

学習曲線、期待と実際のギャップ
--------------------------------------------------

* 経験に比例して直線で学習が進むと考えがちだが、実際は横軸に張り付く（全然進まない感覚）
* （プログラミングに限らず）何かを身につけるのは *簡単な道のりではない* と思っています

オススメの考え方：過去の自分と比較しよう
--------------------------------------------------

* 例：今日は改行を含んだprintができるようになったぞ！🙌
* 情報収集➡️モデル化➡️検証を繰り返し、モデルをちょっとずつじわじわと更新していく

3. ひとつの教材を極め抜け
========================================

* 一歩一歩進む以上、時間はかかるもの
* 紹介した教材、あれもこれもは現実的でない

1つの教材に絞ろう
--------------------------------------------------

* 入門教材を1つ選んで絞ろう
* ただし、最初から極め抜こうとはしない（わからないところは飛ばそう）
* 最初はさーっと **全体感** をつかもう

何周もして極め抜け
--------------------------------------------------

* 1回では全ては理解できないもの。何周もしよう
* 最初は分からないところ、繰り返したときに分かる瞬間が訪れます（未来で待ってる）
* 参考 https://github.com/ftnext/2018_LTslides/blob/master/django_girls_Nov_for_beginners/PITCHME.md

.. 1.01の365乗の話（校長講話らしい。三木谷社長？）

先の話：ひとつの教材を極め抜いたら
--------------------------------------------------

* 全てを網羅した教材はない
* 極め抜いた核に、他の教材を **つまみ読みして補完** していく
* 読み込んだ1教材 & たくさんの教材の必要に応じたつまみ読み

.. 元ネタを紹介してもいいかも

One more thing: stapyで学んだこと
========================================

みんなのPython勉強会 代表 阿久津さん提唱 **Python学習のTIPs**

.. _Python学習のTIPs: https://www.slideshare.net/TakeshiAkutsu/python-in-3-intro/14

stapy発 `Python学習のTIPs`_
--------------------------------------------------

* Textbook：書籍
* Internet：インターネット上のリソース
* People： **コミュニティ** 、勉強会

People!!
--------------------------------------------------

* このトークではTextbookやInternetをいくつか紹介
* Peopleという側面もある！

  * Pythonをきっかけに人とつながれる
  * 知見を共有したり、互いに学べる

小まとめ：サイクルを回すためのtips
============================================================

1. 写経しながら考える
2. 一歩一歩
3. ひとつの教材を極め抜け
4. Python学習のTIPs（特にPeople）
