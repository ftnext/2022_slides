プログラミングを学ぶって何？
========================================

（Pythonに限らず） *プログラミングを学ぶ* ってどういうことなんでしょう？

.. _エンジニアの知的生産術: https://gihyo.jp/book/2018/978-4-7741-9876-7

.. _はじめに プログラミングはどうやって学ぶか: https://scrapbox.io/nishio/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AE%E7%9F%A5%E7%9A%84%E7%94%9F%E7%94%A3%E8%A1%93_%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AF%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E5%AD%A6%E3%81%B6%E3%81%8B

先人の知恵：『`エンジニアの知的生産術`_』
--------------------------------------------------

* 参考「`はじめに プログラミングはどうやって学ぶか`_」
* 「はじめに」自体は公開されています（ぜひお読みください！）

プログラミングの学びのプロセス
--------------------------------------------------

* 情報収集
* モデル化
* 検証

`はじめに プログラミングはどうやって学ぶか`_ より

この3つを **繰り返す** 🔁
--------------------------------------------------

.. image:: https://i.gyazo.com/42ebd9375c1d3ff9ff1bffe69918fad6.png

`はじめに プログラミングはどうやって学ぶか`_ より

具体例で見てみましょう
========================================

* 情報収集
* ➡️モデル化
* ➡️検証
* ➡️情報収集
*  :

情報収集
--------------------------------------------------

* 他の人が書いたプログラムを読む（入門教材）
* 写経（＝プログラムをまねて入力）

.. code-block:: python

    >>> print("こんにちは、プログラミング")
    こんにちは、プログラミング

抽象化
--------------------------------------------------

* 共通する **パターン** を見いだす
* 助けになるのが、 *複数のものを見比べ、共通点を見いだす* こと

.. code-block:: python

    # 見出したパターン
    print("きっとここに書いたものが表示される")

表示する文字列を変えたい
--------------------------------------------------

* 「たーのしー！プログラミング」と表示したい場合はどうする？
* 今知っている： `print("きっとここに書いたものが表示される")`

.. code-block:: python

    # こう書けばいいのではないか（思い付いた）
    print("たーのしー！プログラミング")

検証
--------------------------------------------------

* 思い付いた **仮説を検証** する
* 試してみて、「たーのしー！プログラミング」と表示できるか

.. code-block:: python

    >>> print("たーのしー！プログラミング")
    たーのしー！プログラミング

表示する文字列をもっと変えたい
========================================

* 「たーのしー！（改行）プログラミング」と表示したい

.. code-block:: txt

    たーのしー！
    プログラミング

思い付いた仮説
--------------------------------------------------

* `print("きっとここに書いたものが表示される")` のだから、「たーのしー！（改行）プログラミング」と書いてみる

.. code-block:: python

    print("たーのしー！
    プログラミング")

仮説の検証
--------------------------------------------------

.. code-block:: python

    >>> print("たーのしー！  # doctest: +SKIP
      File "<stdin>", line 1
        print("たーのしー！
              ^
    SyntaxError: unterminated string literal (detected at line 1)

``SyntaxError`` ！😱
--------------------------------------------------

* `構文エラー <https://docs.python.org/ja/3/tutorial/errors.html#syntax-errors>`_
* 📣エラーは失敗ではない
* 仮説を検証したところ、単に改行したのでは **うまくいかないことが分かった**

『`エンジニアの知的生産術`_』より
--------------------------------------------------

    | 「この方法ではうまくいかない」という具体的情報を発見したのです。
    | これは学びのチャンスです。
    | 「どうして思ったように動かないのか？」──こう考えることで、あなたは理解を深めていくことができます。

単に改行したのではうまくいかない
--------------------------------------------------

* **情報収集➡️モデル化➡️検証** を繰り返す
* まずは情報収集

改行を表示するために情報収集
--------------------------------------------------

* 例：Google検索「Python 改行 print」
* 役に立ちそうな情報を含んだ **サンプルコード** が見つかる

集めた情報からモデル化
--------------------------------------------------

* 新しいサンプルコードを、今までに集めた情報と比較し、パターンを見いだす（**パターンを更新する**）
* 「こうすれば改行を表示できるはず」新たな仮説

新たな仮説を検証
--------------------------------------------------

* 改行を表示できたら目的達成！（**次のやりたいことへ**）
* 別のエラーなどで目的を達成できなかったら、 **再度** 情報収集➡️モデル化➡️検証 を回す

nikkieの意見：つまり、プログラミングを学ぶとは
==================================================

* 情報収集し、
* パターンを見出し、
* 「こうすればいいのでは」という仮説を検証する

**この（際限のない）繰り返し**

nikkieの意見：プログラミングするということ
--------------------------------------------------

* すでに知っていることはそれを利用すればよい
* *知らない・分からないこと* は必ず出てくる（全ては知り尽くせない）

  * 情報収集➡️モデル化➡️検証 で **学んで対応** する
