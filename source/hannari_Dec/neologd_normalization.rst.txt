正規化処理 クローズアップ
================================================================================

TODO：列挙

**先頭** と **末尾** の半角スペース削除
================================================================================

.. code-block:: python

    >>> "      テキストの前".strip()
    'テキストの前'
    >>> "テキストの後      ".strip()
    'テキストの後'

https://docs.python.org/ja/3/library/stdtypes.html#str.strip

文字を置換 :code:`re.sub(pattern, repl, string)`
================================================================================

    string 中に出現する最も左の重複しない pattern を置換 repl で置換することで得られる文字列を返します。

https://docs.python.org/ja/3/library/re.html#re.sub

❗️replが関数のときは、動きがちょっと異なります

文字を置換して揃える
--------------------------------------------------

.. TODO unicodedataで辞書を引く

* ハイフンマイナスっぽい文字は ``-`` に
* 長音記号っぽい文字は ``ー`` に

  * 1回以上連続する長音記号は1つにまとめる

.. revealjs-break::

.. code-block:: python

    >>> import re
    >>> # ハイフンマイナスっぽい文字を揃える
    >>> re.sub("[˗֊‐‑‒–⁃⁻₋−]+", "-", "o₋o")
    'o-o'
    >>> # 長音記号っぽい文字を揃える
    >>> # & 1回以上連続する長音記号は1つにまとめる（replのーはpatternに含まれている）
    >>> re.sub("[﹣－ｰ—―─━ー]+", "ー", "majika━")
    'majikaー'
    >>> re.sub("[﹣－ｰ—―─━ー]+", "ー", "スーパーーーー")
    'スーパー'

空文字列に置換（＝削除）
--------------------------------------------------

* チルダっぽい文字は削除

.. code-block:: python

    >>> re.sub("[~∼∾〜〰～]", "", "わ〰い")
    'わい'

全角・半角変換 :code:`unicodedata.normalize(form, unistr)`
================================================================================

    | Unicode 文字列 unistr の正規形 form を返します。
    | form の有効な値は、'NFC'、'NFKC'、'NFD'、'NFKD' です。

https://docs.python.org/ja/3/library/unicodedata.html#unicodedata.normalize

**全角英数字を半角に** 置換できる
--------------------------------------------------

.. code-block:: python

    >>> import unicodedata
    >>> unicodedata.normalize("NFKC", "０１２ＡＢＣｘｙｚ")
    '012ABCxyz'

**半角カタカナを全角に** 置換できる
--------------------------------------------------

.. code-block:: python

    >>> hankaku = "ﾊﾝｶﾞｸ"
    >>> len(hankaku)
    5
    >>> unicodedata.normalize("NFKC", hankaku)
    'ハンガク'
    >>> len(_)
    4

全角英数字と半角カタカナについて処理
--------------------------------------------------

.. code-block:: python

    >>> import re
    >>> import unicodedata
    >>> # 全角英数字と半角カタカナを表す正規表現
    >>> pattern = re.compile("([０-９Ａ-Ｚａ-ｚ｡-ﾟ]+)")
    >>> "".join(
    ...     unicodedata.normalize("NFKC", x) if pattern.match(x) else x
    ...     for x in re.split(pattern, "０１２ＡＢＣｘｙｚはﾊﾝｶﾞｸ")
    ... )
    '012ABCxyzはハンガク'

補足情報🏃‍♂️
--------------------------------------------------

.. _BERTによる自然言語処理入門: https://www.ohmsha.co.jp/book/9784274227264/
.. _プログラマのための文字コード技術入門: https://gihyo.jp/book/2019/978-4-297-10291-3

* すべての文字をNFKCに正規化するアプローチもあります（『`BERTによる自然言語処理入門`_』）
* 「NFKCとかNFKDとかってなんだ！？」👉『`プログラマのための文字コード技術入門`_』付録A.4

全角・半角変換 **記号** 編
================================================================================

* 半角に揃えたい記号
* 全角に揃えたい記号

以下の変換ルールとする
--------------------------------------------------

* 以下の全角記号は半角に置換

  * /！”＃＄％＆’（）＊＋，−．／：；＜＞？＠［￥］＾＿｀｛｜｝

* 以下の半角記号は全角に置換

  * ｡､･=｢｣

今回紹介する実装
--------------------------------------------------

1. 記号を **全角に揃える**
2. 半角に置換する記号だけ置換する

:code:`str.translate(table)`
--------------------------------------------------

    与えられた変換テーブルに基づいて文字列を構成する各文字をマッピングし、マッピング後の文字列のコピーを返します。

    文字から文字への異なる形式のマッピングから変換マップを作成するために、 :code:`str.maketrans()` が使えます。

https://docs.python.org/ja/3/library/stdtypes.html#str.translate

:code:`str.maketrans`
--------------------------------------------------

.. code-block:: python

    >>> mapping = str.maketrans(
    ...     '!"#$%&\'()*+,-./:;<=>?@[¥]^_`{|}~｡､･｢｣',
    ...     "！”＃＄％＆’（）＊＋，－．／：；＜＝＞？＠［￥］＾＿｀｛｜｝〜。、・「」"
    ... )
    >>> ord("#")
    35
    >>> mapping[ord("#")]  # Unicodeコードポイント間の変換を表す
    65283
    >>> chr(_)
    '＃'

変換マップを使って :code:`str.translate`
--------------------------------------------------

.. code-block:: python

    >>> "!#".translate(mapping)
    '！＃'

記号を全角に揃えられる！

半角に置換する記号だけ置換する
--------------------------------------------------

再度の :code:`unicodedata.normalize`

.. code-block:: python

    >>> unicodedata.normalize("NFKC", "！＃")  # 半角に戻る
    '!#'
    >>> pattern = re.compile("([！”＃＄％＆’（）＊＋，－．／：；＜＞？＠［￥］＾＿｀｛｜｝〜]+)")
    >>> "".join(
    ...     unicodedata.normalize("NFKC", x) if pattern.match(x) else x
    ...     for x in re.split(pattern, "!｡#".translate(mapping))
    ... )
    '!。#'

クォートだけ注意
--------------------------------------------------

.. code-block:: python

    >>> # 全角にしたクォートは半角に戻らない
    >>> unicodedata.normalize("NFKC", "”％’")
    '”%’'
    >>> # re.subで半角に戻す
    >>> re.sub('[’]', "'", _)
    "”%'"
    >>> re.sub('[”]', '"', _)
    '"%\''

スペースの削除
================================================================================

先頭と末尾の半角スペース以外も

* 全角スペースは半角スペースに置換
* 1つ以上の半角スペースは、1つの半角スペースに置換

.. code-block:: python

    s = re.sub('[ 　]+', ' ', s)

**文字列中** の半角スペースを削除！
--------------------------------------------------

* 「ひらがな・全角カタカナ・半角カタカナ・漢字・全角記号」間に含まれる場合

  * 消える例：「アイ の 歌声 を 聴か せ て」

* 「ひらがな・全角カタカナ・半角カタカナ・漢字・全角記号」と「半角英数字」の間に含まれる場合

  * 消える例：「アルゴリズム C」

正規表現で文字列中の半角スペース削除
--------------------------------------------------

.. code-block:: python

    >>> basic_latin = "\u0000-\u007F"  # 半角英数字
    >>> # 「ひらがな・全角カタカナ・半角カタカナ・漢字・全角記号」
    >>> blocks = "".join(
    ...     (
    ...         "\u4E00-\u9FFF",  # CJK UNIFIED IDEOGRAPHS
    ...         "\u3040-\u309F",  # HIRAGANA
    ...         "\u30A0-\u30FF",  # KATAKANA
    ...         "\u3000-\u303F",  # CJK SYMBOLS AND PUNCTUATION
    ...         "\uFF00-\uFFEF",  # HALFWIDTH AND FULLWIDTH FORMS
    ...     )
    ... )

正規表現の後方参照
--------------------------------------------------

.. code-block:: python

    >>> pattern = re.compile("([{}]) ([{}])".format(blocks, basic_latin))
    >>> m = pattern.search("アルゴリズム C")
    >>> m.group(1)
    'ム'
    >>> m.group(2)
    'C'
    >>> # \1 は \g<1> と等価。グループ番号1がマッチした部分文字列
    >>> pattern.sub(r"\1\2", "アルゴリズム C")  # 半角スペースを削除
    'アルゴリズムC'

後方参照が見つかる限り、半角スペースを削除
--------------------------------------------------

.. code-block:: python

    >>> pattern = re.compile("([{}]) ([{}])".format(blocks, blocks))
    >>> s = "アイ の 歌声 を 聴か せ て"
    >>> while pattern.search(s):
    ...     s = pattern.sub(r"\1\2", s)
    >>> s
    'アイの歌声を聴かせて'

分かち書きが戻せた！
