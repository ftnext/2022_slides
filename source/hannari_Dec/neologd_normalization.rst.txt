正規化処理 クローズアップ
================================================================================

TODO：列挙

**先頭** と **末尾** の半角スペース削除
================================================================================

.. code-block:: python

    >>> "      テキストの前".strip()
    'テキストの前'
    >>> "テキストの後      ".strip()
    'テキストの後'

https://docs.python.org/ja/3/library/stdtypes.html#str.strip

文字を置換 :code:`re.sub(pattern, repl, string)`
================================================================================

    string 中に出現する最も左の重複しない pattern を置換 repl で置換することで得られる文字列を返します。

https://docs.python.org/ja/3/library/re.html#re.sub

❗️replが関数のときは、動きがちょっと異なります

文字を置換して揃える
--------------------------------------------------

.. TODO unicodedataで辞書を引く

* ハイフンマイナスっぽい文字は ``-`` に
* 長音記号っぽい文字は ``ー`` に

  * 1回以上連続する長音記号は1つにまとめる

.. revealjs-break::

.. code-block:: python

    >>> import re
    >>> # ハイフンマイナスっぽい文字を揃える
    >>> re.sub("[˗֊‐‑‒–⁃⁻₋−]+", "-", "o₋o")
    'o-o'
    >>> # 長音記号っぽい文字を揃える
    >>> re.sub("[﹣－ｰ—―─━ー]+", "ー", "majika━")
    'majikaー'
    >>> # 1回以上連続する長音記号は1つにまとめる（replのーはpatternに含まれている）
    >>> re.sub("[﹣－ｰ—―─━ー]+", "ー", "スーパーーーー")
    'スーパー'

空文字列に置換（＝削除）
--------------------------------------------------

* チルダっぽい文字は削除

.. code-block:: python

    >>> re.sub("[~∼∾〜〰～]", "", "わ〰い")
    'わい'

全角・半角変換 :code:`unicodedata.normalize(form, unistr)`
================================================================================

    | Unicode 文字列 unistr の正規形 form を返します。
    | form の有効な値は、'NFC'、'NFKC'、'NFD'、'NFKD' です。

https://docs.python.org/ja/3/library/unicodedata.html#unicodedata.normalize

**全角英数字を半角に** 置換できる
--------------------------------------------------

.. code-block:: python

    >>> import unicodedata
    >>> unicodedata.normalize("NFKC", "０１２ＡＢＣｘｙｚ")
    '012ABCxyz'

**半角カタカナを全角に** 置換できる
--------------------------------------------------

.. code-block:: python

    >>> hankaku = "ﾊﾝｶﾞｸ"
    >>> len(hankaku)
    5
    >>> unicodedata.normalize("NFKC", hankaku)
    'ハンガク'
    >>> len(_)
    4

全角英数字と半角カタカナについて処理
--------------------------------------------------

.. code-block:: python

    >>> import re
    >>> import unicodedata
    >>> # 全角英数字と半角カタカナを表す正規表現
    >>> pattern = re.compile("([０-９Ａ-Ｚａ-ｚ｡-ﾟ]+)")
    >>> "".join(
    ...     unicodedata.normalize("NFKC", x) if pattern.match(x) else x
    ...     for x in re.split(pattern, "０１２ＡＢＣｘｙｚはﾊﾝｶﾞｸ")
    ... )
    '012ABCxyzはハンガク'

補足情報🏃‍♂️
--------------------------------------------------

.. _BERTによる自然言語処理入門: https://www.ohmsha.co.jp/book/9784274227264/
.. _プログラマのための文字コード技術入門: https://gihyo.jp/book/2019/978-4-297-10291-3

* すべての文字をNFKCに正規化するアプローチもあります（『`BERTによる自然言語処理入門`_』）
* 「NFKCとかNFKDとかってなんだ！？」👉『`プログラマのための文字コード技術入門`_』付録A.4
